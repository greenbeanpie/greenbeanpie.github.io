<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于一些IDE的推荐</title>
      <link href="/2024/06/08/ide-recommendation/"/>
      <url>/2024/06/08/ide-recommendation/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了给我们学校的信息技术老师建议使用一些其他的 IDE 而不要再用 IDLE（Python自带编辑器），这篇文章出现了。</p><p>附：这里不只有 Python 编辑器推荐，其他的单语言编辑器和多语言编辑器在这里都会有出现（不考虑vim、nano类编辑器和各语言内置编辑器（如果有的话，如 IDLE，古早编辑器如 UltraEdit 也不会提及，当然绝对不是因为我太菜了不知道），如果你是 OIer，也可以往下看。</p><h2 id="多语言编辑器"><a href="#多语言编辑器" class="headerlink" title="多语言编辑器"></a>多语言编辑器</h2><h3 id="省流表"><a href="#省流表" class="headerlink" title="省流表"></a>省流表</h3><table><thead><tr><th align="right"></th><th align="right">Sublime Text</th><th align="right">Visual Studio Code</th></tr></thead><tbody><tr><td align="right">资源占用</td><td align="right">较低</td><td align="right">较高</td></tr><tr><td align="right">连字/git/ARM64平台支持</td><td align="right">支持</td><td align="right">支持</td></tr><tr><td align="right">调试</td><td align="right">不支持</td><td align="right">支持</td></tr><tr><td align="right">WSL/Docker/SSH 等容器/远程开发支持</td><td align="right">非官方支持</td><td align="right">官方支持（插件）</td></tr><tr><td align="right">Code Coverage/Profiling等功能</td><td align="right">非官方支持</td><td align="right">非官方支持</td></tr><tr><td align="right">Linux 软件包管理器支持（仅考虑apt/dnf(yum)/pacman）</td><td align="right">官方支持+手动配置</td><td align="right">官方支持+手动配置</td></tr><tr><td align="right">收费</td><td align="right">是（试用期不影响使用）</td><td align="right">否</td></tr></tbody></table><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><p>下载链接：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a></p><p>点击上方链接，点击首页 Download 即可。如果下载速度较慢可用魔法或去国内流氓软件站下载。</p><p>欢迎 xhgua 发 Pull Request 来给这里添加内容，我是真没用过（逃）</p><h3 id="Visual-Studio-Code（VSCode）"><a href="#Visual-Studio-Code（VSCode）" class="headerlink" title="Visual Studio Code（VSCode）"></a>Visual Studio Code（VSCode）</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载链接：<a href="code.visualstudio.com">code.visualstudio.com</a></p><p>选择中间大大的下载按钮即可。</p><p>如果你没有梯子或者下载速度太慢，可以通过国内流氓软件站下载，也可以参照如下方法：</p><blockquote><p>将下载中的VSCode的链接复制下来，再在浏览器新开一个标签页，将刚刚复制好的链接粘贴进去。然后，将链接中的 <code>https://az764295.vo.msecnd.net</code> 替换成 <code>https://vscode.cdn.azure.cn</code> 即可。这一步是将下载地址改为国内的镜像地址。</p></blockquote><p>注意不要下到 CEC-IDE。</p><p>打开直接按步骤安装即可。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>打开 VSCode ，不管新手教程，直接点击右侧的四个方块的图标（Extension）,</p><p><img src="https://greenbeanpie.github.io/medias/share/1.jpg?raw=true" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 信息技术 </tag>
            
            <tag> IDE(编辑器) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WZ-自动点餐小程序</title>
      <link href="/2024/03/18/auto-order-program/"/>
      <url>/2024/03/18/auto-order-program/</url>
      
        <content type="html"><![CDATA[<p>你说得对，但是作者因为不知道 HTTP GET 的t参数是怎么出来的这个程序已经流产了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 信息技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻墙教程</title>
      <link href="/2024/03/16/clash-tutorial/"/>
      <url>/2024/03/16/clash-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="寻找可用的-Github-镜像站"><a href="#寻找可用的-Github-镜像站" class="headerlink" title="寻找可用的 Github 镜像站"></a>寻找可用的 Github 镜像站</h2><p>由于众所周知的原因，想要上Github需要看运气或者 <del>使用梯子（不是这不是还没有吗）</del> 使用镜像站。</p><p>镜像站网站可以在百度上找到，或者可以使用 Watt Toolkit（原Steam++）来进行加速。</p><p>以下为笔者写这篇教程时仍然（部分）可用的镜像站网址：</p><p><a href="https://www.kgithub.com/">kgithub.com</a></p><p><a href="https://hub.nuaa.cf/">hub.nuaa.cf</a></p><p>使用方法：直接替换掉 github.com 即可。</p><p>请注意：上方大部分镜像站会屏蔽国外IP（502/404/CONNECTION_REFUSED等），所以你需要在下载完毕订阅文件并且能够正常翻墙后将上述镜像站URL修改回Github的URL。</p><p>如果你可以正常访问Github并且可以忍受下载速度（或有多线程下载器），你可以跳过这一步。</p><h2 id="1-软件的下载和使用"><a href="#1-软件的下载和使用" class="headerlink" title="1. 软件的下载和使用"></a>1. 软件的下载和使用</h2><h3 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h3><p>由于 Clash for Windows 的车主被请喝茶时间，我们的 CFW 已经停止更新了，所以我们需要使用 <a href="https://clashverge.net/">Clash Verge</a> 来代替。进入官网，划到下面的“直接下载”部分，选择对应的系统版本下载即可。</p><p>如果觉得下载速度较慢，你可以复制下载链接并使用上面的镜像站代替 <code>github.com</code>，当然也可以使用 Watt Toolkit。</p><p>Clash系软件支持 TUN 模式，即通过虚拟网卡+修改路由表实现代理功能。在绝大部分情况下，我们推荐使用 TUN 模式代替设置系统代理，除非你没有管理员权限。</p><p>支持非 iOS 端。</p><p>注意在 Linux 上使用时最好将 SELinux 设置为 Permissive 或者 Disabled，否则你在访问非 80/443 端口网站时可能会遇到 SELinux 的拦截<del>绝对不是因为我不会用SELinux！绝对不是！！！</del>。如果你希望使用 TUN 模式，即使你会使用 SELinux 也建议关闭 SELinux（至少看起来配置较为繁琐）。</p><h3 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray*"></a>V2ray*</h3><!-- 如果你想要自己搭建一个梯子并且不希望被光速ban掉（据说工信部已经能够解密使用 Shadowsocks(SS) 和 ShadowsockR(SSR) 协议的通讯流量内容，真实性未知） --><p>V2ray*类软件似乎只支持 V2ray、SS、SSR协议，但是该程序的相比Clash而言支持更多V2ray协议的伪装形式，如果你碰到了需要使用 mKCP 等协议的节点（或者你自己搭建的节点），可以考虑使用这类软件。</p><p>对于不同平台软件的 * 各不相同。</p><p>注意此类软件（电脑版）似乎不支持 TUN 模式。</p><h3 id="Shadowrocket"><a href="#Shadowrocket" class="headerlink" title="Shadowrocket"></a>Shadowrocket</h3><p>iOS 端的翻墙软件，支持嘎嘎多的协议，但是要30美刀。</p><h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><p>iOS 端翻墙软件。</p><h3 id="Potatso-Lite"><a href="#Potatso-Lite" class="headerlink" title="Potatso Lite"></a>Potatso Lite</h3><p>iOS 端翻墙软件。</p><h2 id="1-5-安装软件"><a href="#1-5-安装软件" class="headerlink" title="1.5 安装软件"></a>1.5 安装软件</h2><h3 id="iOS-安装解密-ipa"><a href="#iOS-安装解密-ipa" class="headerlink" title="iOS 安装解密 ipa"></a>iOS 安装解密 ipa</h3><p>如果你是从网站或者其他来源下载的解密 ipa，请参阅如何安装的博客。</p><h3 id="App-Store-安装付费软件（shadowrocket）"><a href="#App-Store-安装付费软件（shadowrocket）" class="headerlink" title="App Store 安装付费软件（shadowrocket）"></a>App Store 安装付费软件（shadowrocket）</h3><p>可以在支付宝购买礼品卡。注意有约10%的苹果税。</p><h3 id="Linux-上通过软件包管理器安装软件"><a href="#Linux-上通过软件包管理器安装软件" class="headerlink" title="Linux 上通过软件包管理器安装软件"></a>Linux 上通过软件包管理器安装软件</h3><p>可以寻找其他人自己设立的仓库（目前已知 Ubuntu 和 Fedora 有第三方库），或者也可以自己打包一个软件包<del>然后造福他人</del>。</p><p>当然直接把软件放在 /opt/ 或者 ~/ 下都是可以的。</p><h3 id="其他安装方式"><a href="#其他安装方式" class="headerlink" title="其他安装方式"></a>其他安装方式</h3><p>啥？你连Windows/Mac上都不会装梯子？你不适合梯子，这边建议肉身翻墙。</p><h2 id="2-如何使用软件"><a href="#2-如何使用软件" class="headerlink" title="2. 如何使用软件"></a>2. 如何使用软件</h2><h3 id="Clash-for-Windows-类"><a href="#Clash-for-Windows-类" class="headerlink" title="Clash for Windows 类"></a>Clash for Windows 类</h3><p>首先打开 Profiles，在上方的地址栏处输入你的订阅文件地址。<del>特别注意如果你使用的是托管在 Github 上的文件可能会出现下载订阅文件需要梯子但是梯子需要下载订阅文件的死循环，此时需要使用镜像站。</del></p><p>镜像站使用方法参见第一段。</p><p>订阅地址输入后点击Download，如果显示Success!绿色字样即已成功，回到Proxies页面，选择你想要的梯子即可。</p><h3 id="Clash-Verge-类"><a href="#Clash-Verge-类" class="headerlink" title="Clash Verge 类"></a>Clash Verge 类</h3><p>参见官方文档，或者等更新。</p><p>咕咕咕。</p><!-- ## 3. 如何搭一个自己的梯子### 提醒事项1. 如果你希望搭建自己的梯子并且在Clash上使用，那么一般建议使用V2ray/Trojan/Hysteria协议，前两者需要域名（如果需要在Clash上使用并且较稳定），而后者据作者本人使用可用性甚至在部分情况下低于SS/SSR，所以如果你想要搭建自己的梯子，那么你应当购买一个域名，此处不过多赘述。 -->]]></content>
      
      
      
        <tags>
            
            <tag> 信息技术 </tag>
            
            <tag> 魔法/科学上网/翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Galgame体验】观后感:冥契的牧神节</title>
      <link href="/2024/03/03/game-experience-gal-1/"/>
      <url>/2024/03/03/game-experience-gal-1/</url>
      
        <content type="html"><![CDATA[<p>你说得对，但是作者已经鸽了三个月了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OI 大事件记录 (大事祭)</title>
      <link href="/2023/12/06/oi-big-events/"/>
      <url>/2023/12/06/oi-big-events/</url>
      
        <content type="html"><![CDATA[<h1 id="OI-大事件记录-大事祭"><a href="#OI-大事件记录-大事祭" class="headerlink" title="OI 大事件记录 (大事祭)"></a>OI 大事件记录 (大事祭)</h1><h2 id="2021"><a href="#2021" class="headerlink" title="2021.?.?"></a>2021.?.?</h2><p>Hello World.</p><h2 id="2023-3-21"><a href="#2023-3-21" class="headerlink" title="2023.3.21"></a>2023.3.21</h2><p>注册洛谷。</p><h2 id="2021-3-28"><a href="#2021-3-28" class="headerlink" title="2021.3.28"></a>2021.3.28</h2><p>第一道黄(也许当时是橙?)，总之在写这篇文章的时候是黄。</p><h2 id="2021-8-14"><a href="#2021-8-14" class="headerlink" title="2021.8.14"></a>2021.8.14</h2><p>第一次 AFO。</p><h2 id="2022-9-11"><a href="#2022-9-11" class="headerlink" title="2022.9.11"></a>2022.9.11</h2><p>不知道为什么打了场月赛，还只有 T1 的 15 分。</p><h2 id="2023-2-17"><a href="#2023-2-17" class="headerlink" title="2023.2.17"></a>2023.2.17</h2><p>进入 wzOI。</p><h2 id="2023-12-13"><a href="#2023-12-13" class="headerlink" title="2023.12.13"></a>2023.12.13</h2><p>首次退役。</p><p>咕咕咕。</p><h2 id="2024-3-3"><a href="#2024-3-3" class="headerlink" title="2024.3.3"></a>2024.3.3</h2><p>我复活了(?)并且打了 LCT 模板。</p><h3 id="2024-3-11"><a href="#2024-3-11" class="headerlink" title="2024.3.11"></a>2024.3.11</h3><p>打树剖打破防了，打了20分钟还没打完。</p><p>咕咕咕。</p><p>注：结局见更新的日记</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程语言中各命令使用时间</title>
      <link href="/2023/11/15/command-time/"/>
      <url>/2023/11/15/command-time/</url>
      
        <content type="html"><![CDATA[<p>你在找什么？</p><p>咕咕咕。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> OI </tag>
            
            <tag> 信息技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diary</title>
      <link href="/2023/10/31/diary/"/>
      <url>/2023/10/31/diary/</url>
      
        <content type="html"><![CDATA[<h1 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h1><h2 id="2023-10"><a href="#2023-10" class="headerlink" title="2023/10"></a>2023/10</h2><h3 id="2023-10-30"><a href="#2023-10-30" class="headerlink" title="2023/10/30"></a>2023/10/30</h3><p>喜提新外号：git push origin main -f，简称 force push 或 -f。</p><p>事件经过如下：</p><p>xhgua：为什么我的代码push不上去</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[remote rejected]</span><br></pre></td></tr></tbody></table></figure><p>我：你在家里写代码了以后fetch/pull过了吗</p><p>xhgua：我fetch过了</p><p>我：git push origin main -f</p><p>xhgua：这是什么？（回车）</p><p>我：强制push参数。</p><p>A few minutes later……</p><p>xhgua：等下我的题解呢？</p><p>打开<a href="https://www.github.com/xhgua/OI">github.com</a></p><p>《force push》</p><p>喜提新外号 -f。</p><h3 id="2024-03-11"><a href="#2024-03-11" class="headerlink" title="2024/03/11"></a>2024/03/11</h3><p>大好社团活动时间当然要来机房了！</p><p>于是康复训练树剖打了20分钟还没打完。</p><p>咕咕咕。</p><p>注: 2024/06/08 补:树剖绿板子写了4小时，怕不是去玩原神了</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cambridge dictionary 单词查询程序</title>
      <link href="/2023/10/29/cambridge-dictionary-query-program/"/>
      <url>/2023/10/29/cambridge-dictionary-query-program/</url>
      
        <content type="html"><![CDATA[<p>程序会自动从 <code>word.in</code> 中获取信息并输出结果，输入格式如下：</p><p>第一行 $ n $ 为书本数量，以下有 $ n $ 组数据，每组的第一行为书本名称，第二行为页数 $ m $ ，下有 $ m $ 组数据，每组的第 $ 1~3 $ 行 分别为页码、标题和单词数量 $ k $ ，下有 $ k $ 个单词。</p><p>程序会自动输出 test.tex 。</p><p>请确保你安装了 requests、bs4、lxml模块。</p><p>请将以下两个文件放到同一个目录下运行。</p><p>main.py:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests, os, sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> write <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from tqdm import tqdm</span></span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.retry <span class="keyword">import</span> Retry</span><br><span class="line"></span><br><span class="line">os.chdir(os.getcwd() + <span class="string">"/Something else/20231019/"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">head = <span class="string">"""</span></span><br><span class="line"><span class="string">\\documentclass[a4paper,margin=1.0cm,10.5pt]{book}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\usepackage[UTF8]{ctex}</span></span><br><span class="line"><span class="string">\\usepackage{tipa}</span></span><br><span class="line"><span class="string">\\usepackage{color}</span></span><br><span class="line"><span class="string">\\usepackage{geometry}</span></span><br><span class="line"><span class="string">\\usepackage{fontspec}</span></span><br><span class="line"><span class="string">\\usepackage{xcolor}</span></span><br><span class="line"><span class="string">\\usepackage{titlesec}</span></span><br><span class="line"><span class="string">\\defaultfontfeatures{Ligatures=TeX}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\setmainfont{Times New Roman}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\renewcommand{\\large}{\\fontsize{14pt}{\\baselineskip}\\selectfont}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\definecolor{Purple}{rgb}{.256,.0,.511}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\newfontfamily\\sectionfont[Color=Purple]{Times New Roman}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\titleformat*{\\section}{\\large\\bfseries\\sffamily\\color{Purple}}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\begin{document}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\title{Vocabulary}</span></span><br><span class="line"><span class="string">\\maketitle</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\pagenumbering{roman}</span></span><br><span class="line"><span class="string">\\tableofcontents</span></span><br><span class="line"><span class="string">\\newpage</span></span><br><span class="line"><span class="string">\\pagenumbering{arabic}</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">tail = <span class="string">"""\\end{document}"""</span></span><br><span class="line"></span><br><span class="line">header = {</span><br><span class="line"><span class="string">"Cookie"</span>: <span class="string">'XSRF-TOKEN=091b0a7e-7b7c-440f-82ba-7853a686d0e8; preferredDictionaries="english-chinese-simplified,english-chinese-traditional,english,british-grammar"; _ga=GA1.3.1985437458.1697684466; _gid=GA1.3.1397756659.1697684466; amp-access=amp-DgWec-PNndO292HPfqJugg; _hjFirstSeen=1; _hjSession_2790984=eyJpZCI6Ijc4ZmUwMGE3LTM0MjQtNGNhNi1hMjYwLTE3Yjc3YmQxMTE0MSIsImNyZWF0ZWQiOjE2OTc2ODQ0Njc0NTcsImluU2FtcGxlIjpmYWxzZSwic2Vzc2lvbml6ZXJCZXRhRW5hYmxlZCI6dHJ1ZX0=; _sp_ses.7ecc=*; OptanonConsent=isGpcEnabled=0&amp;datestamp=Thu+Oct+19+2023+11%3A01%3A20+GMT%2B0800+(China+Standard+Time)&amp;version=202308.1.0&amp;browserGpcFlag=0&amp;isIABGlobal=false&amp;hosts=&amp;landingPath=NotLandingPage&amp;groups=C0001%3A1%2CC0002%3A1%2CC0003%3A1%2CC0004%3A0&amp;AwaitingReconsent=false; _sp_id.7ecc=3979def0-c2d7-4674-82ae-82dabd30e180.1697684468.1.1697684480..0b270403-3325-4540-80fe-b9939b45295d....0; _hjSessionUser_2790984=eyJpZCI6IjllMjU2Zjk3LTU5ZjAtNWNhYi1hYzI4LWUyZDlhYmIzOGY4ZiIsImNyZWF0ZWQiOjE2OTc2ODQ0Njc0NTcsImV4aXN0aW5nIjp0cnVlfQ==; _gat=1; iawsc1m=1; _sharedID=54582c27-481b-45f6-af8b-567598974fc2; _sharedID_cst=zix7LPQsHA%3D%3D; _pbjs_userid_consent_data=3524755945110770; _sharedid=0362b518-b56a-4a08-9f01-687b29d9e710; _lr_retry_request=true; _lr_env_src_ats=false; pbjs-unifiedid=%7B%22TDID%22%3A%22b82f813d-b87d-406b-920c-4d28ffdd6e63%22%2C%22TDID_LOOKUP%22%3A%22TRUE%22%2C%22TDID_CREATED_AT%22%3A%222023-09-19T03%3A10%3A42%22%7D; pbjs-unifiedid_cst=zix7LPQsHA%3D%3D; loginPopup=5; _ga_L9GCR21SZ7=GS1.3.1697684466.1.1.1697685069.27.0.0; iawpvccs=4; iawpvc=4; iawpvtc1m=4; cto_bundle=-fkA8F9VeGgzOEh2TlVBQyUyQnowREg4QkhxZlY5USUyQnRrdSUyQmQ3ZHFlSTRJJTJCTmppNmt1WCUyRlFxQWhKSlNKN1d6T0NwU3Z1RUx6WmUxSmxqOWd4RHROekZuclFJZCUyRjZQYnNyTjVoSmRpUzBpSyUyQmdGWnI3bHFVZFZ4Q3YzU1hxd0JQZmMlMkJFV0NUZjAlMkZuQm96NU9BNU14M2RVSkxaS0ElM0QlM0Q; cto_bidid=PEgR8V9vZWpoUjBET21nT0lHSUhkZUMySG1WZUhYMDJFbGxmUUR5cFJxUTZhejNRY3lmNWFDZlJrRjlJTDRoMnNxQTFlaTJKd3U3Z3BWdmx0S3FBNXZVZU8xMEZmbUQwVUZKRXpRdFNqSFZYZ3RQdyUzRA'</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46"</span>,</span><br><span class="line"><span class="string">"sec-ch-ua-mobile"</span>: <span class="string">"0"</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">"test.tex"</span>, <span class="string">"w+"</span>)</span><br><span class="line"></span><br><span class="line">stdin = <span class="built_in">open</span>(<span class="string">"word.in"</span>, <span class="string">"r"</span>)</span><br><span class="line"></span><br><span class="line">file.write(head)</span><br><span class="line"></span><br><span class="line"><span class="comment"># book = input("请输入书本:")</span></span><br><span class="line"></span><br><span class="line">cntbook = <span class="built_in">int</span>(stdin.readline())</span><br><span class="line"></span><br><span class="line">lock=threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">word</span>):</span><br><span class="line"><span class="comment"># templine.set_description("Processing "+nowpage)</span></span><br><span class="line">word = word.replace(<span class="string">" "</span>,<span class="string">"-"</span>)</span><br><span class="line">word = word.replace(<span class="string">"/"</span>,<span class="string">"-"</span>)</span><br><span class="line">session = requests.Session()</span><br><span class="line">retry = Retry(total=<span class="number">114514</span>, backoff_factor=<span class="number">5</span>)</span><br><span class="line">adapter = HTTPAdapter(max_retries=retry)</span><br><span class="line">session.mount(<span class="string">'http://'</span>, adapter)</span><br><span class="line">session.mount(<span class="string">'https://'</span>, adapter)</span><br><span class="line">response = session.get(</span><br><span class="line"><span class="string">"https://dictionary.cambridge.org/dictionary/english-chinese-simplified/"</span></span><br><span class="line">+ word,</span><br><span class="line">headers=header,</span><br><span class="line">)</span><br><span class="line">contentori = BeautifulSoup(response.text, <span class="string">"lxml"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">word = contentori.find_all(<span class="string">"span"</span>,class_=<span class="string">"hw dhw"</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Error occured on word "</span>+word+<span class="string">", please check the code or spelling."</span>)</span><br><span class="line"><span class="comment"># tempfile = open("test.out","r")</span></span><br><span class="line"><span class="comment"># temptext = tempfile.read()</span></span><br><span class="line"><span class="comment"># tempfile.close()</span></span><br><span class="line"><span class="comment"># content = BeautifulSoup(temptext ,"lxml")</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">for</span> content1 <span class="keyword">in</span> contentori.find_all(<span class="string">"div"</span>, class_=<span class="string">"pr entry-body__el"</span>):</span><br><span class="line">temp = content1.find_all(<span class="string">"div"</span>, class_=<span class="string">"pr dsense"</span>)</span><br><span class="line">pronoun=<span class="string">""</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">pronoun = content1.find_all(<span class="string">"span"</span>, class_=<span class="string">"pron dpron"</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">part_of_speech = content1.find_all(<span class="string">"span"</span>, class_=<span class="string">"pos dsense_pos"</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">part_of_speech = content1.find_all(<span class="string">"span"</span>,class_=<span class="string">"pos dpos"</span>)[<span class="number">0</span>].text</span><br><span class="line">attri=<span class="string">""</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">attri = content1.find_all(<span class="string">"span"</span>, class_=<span class="string">"dgram"</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">temp2 = content1.find_all(<span class="string">"div"</span>,class_=<span class="string">"def-block ddef_block"</span>)</span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> temp2:</span><br><span class="line">chinese = content.find_all(</span><br><span class="line"><span class="string">"span"</span>, class_=<span class="string">"trans dtrans dtrans-se break-cj"</span></span><br><span class="line">)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">attri = content.find_all(<span class="string">"span"</span>, class_=<span class="string">"dgram"</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">describe = content.find_all(<span class="string">"span"</span>, class_=<span class="string">"guideword dsense_gw"</span>)</span><br><span class="line">example_ENG = content.find_all(<span class="string">"span"</span>, class_=<span class="string">"eg deg"</span>)</span><br><span class="line">example_CHI = content.find_all(</span><br><span class="line"><span class="string">"span"</span>, class_=<span class="string">"trans dtrans dtrans-se hdb break-cj"</span></span><br><span class="line">)</span><br><span class="line">sentence = content.find_all(<span class="string">"li"</span>, class_=<span class="string">"eg dexamp hax"</span>)</span><br><span class="line">write(</span><br><span class="line">file,</span><br><span class="line">word,</span><br><span class="line">pronoun,</span><br><span class="line">chinese,</span><br><span class="line">part_of_speech,</span><br><span class="line">attri,</span><br><span class="line">example_CHI,</span><br><span class="line">example_ENG,</span><br><span class="line">sentence,</span><br><span class="line">)</span><br><span class="line">lock.release()</span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment"># # content = temp[0]</span></span><br><span class="line"><span class="comment"># chinese = contentori.find_all(</span></span><br><span class="line"><span class="comment"># "span", class_="trans dtrans dtrans-se break-cj"</span></span><br><span class="line"><span class="comment"># )[0].text</span></span><br><span class="line"><span class="comment"># part_of_speech = ""</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment"># part_of_speech = contentori.find_all("span", class_="pos dpos")[0].text</span></span><br><span class="line"><span class="comment"># except IndexError:</span></span><br><span class="line"><span class="comment"># part_of_speech = contentori.find_all("span", class_="pos dsense_pos")[</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># ].text</span></span><br><span class="line"><span class="comment"># attri = ""</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment"># attri = contentori.find_all("span", class_="dgram")[0].text</span></span><br><span class="line"><span class="comment"># except:</span></span><br><span class="line"><span class="comment"># pass</span></span><br><span class="line"><span class="comment"># describe = contentori.find_all("span", class_="guideword dsense_gw")</span></span><br><span class="line"><span class="comment"># example_ENG = contentori.find_all("span", class_="eg deg")</span></span><br><span class="line"><span class="comment"># example_CHI = contentori.find_all(</span></span><br><span class="line"><span class="comment"># "span", class_="trans dtrans dtrans-se hdb break-cj"</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="comment"># sentence = contentori.find_all("li", class_="eg dexamp hax")</span></span><br><span class="line"><span class="comment"># write(</span></span><br><span class="line"><span class="comment"># file,</span></span><br><span class="line"><span class="comment"># word,</span></span><br><span class="line"><span class="comment"># pronoun,</span></span><br><span class="line"><span class="comment"># chinese,</span></span><br><span class="line"><span class="comment"># part_of_speech,</span></span><br><span class="line"><span class="comment"># attri,</span></span><br><span class="line"><span class="comment"># example_CHI,</span></span><br><span class="line"><span class="comment"># example_ENG,</span></span><br><span class="line"><span class="comment"># sentence,</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Error occured on word "</span>+word+<span class="string">", please check the code or spelling."</span>)</span><br><span class="line">lock.release()</span><br><span class="line"><span class="comment"># file.write("\n\n\n")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> nowbook <span class="keyword">in</span> <span class="built_in">range</span>(cntbook):</span><br><span class="line">book = stdin.readline().replace(<span class="string">"\n"</span>,<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">page = <span class="built_in">int</span>(stdin.readline())</span><br><span class="line"></span><br><span class="line">file.write(<span class="string">"\\chapter{"</span> + book + <span class="string">"}\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(page):</span><br><span class="line"><span class="comment"># temp = stdin.readline().split()</span></span><br><span class="line">nowpage = stdin.readline().replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line"><span class="comment"># print("processing "+nowpage)</span></span><br><span class="line">file.write(</span><br><span class="line"><span class="string">"\\textcolor[RGB]{128,0,255}{\\section{"</span></span><br><span class="line">+ book</span><br><span class="line">+ <span class="string">" "</span></span><br><span class="line">+ nowpage</span><br><span class="line">+ <span class="string">" "</span></span><br><span class="line">+ stdin.readline().replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">+ <span class="string">"}}\n"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># file.write("\\begin{enumerate}\n")</span></span><br><span class="line"><span class="comment"># cnt = int(stdin.readline())</span></span><br><span class="line">cnt=<span class="built_in">int</span>(stdin.readline())</span><br><span class="line">words=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">words.append(stdin.readline().replace(<span class="string">"\n"</span>,<span class="string">""</span>))</span><br><span class="line"><span class="comment"># words = stdin.readline()</span></span><br><span class="line">threadings = []</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">threadings.append(</span><br><span class="line">threading.Thread(</span><br><span class="line">target=solve,</span><br><span class="line">args=[</span><br><span class="line">word,</span><br><span class="line">],</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threadings:</span><br><span class="line">t.start()</span><br><span class="line"><span class="comment"># for t in threadings:</span></span><br><span class="line">t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file.write(tail)</span><br><span class="line">file.close()</span><br></pre></td></tr></tbody></table></figure><p>write.py:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">shape = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">lock=threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params"></span></span><br><span class="line"><span class="params">file, <span class="comment"># 要写入的文件</span></span></span><br><span class="line"><span class="params">word=<span class="string">""</span>, <span class="comment"># 原文</span></span></span><br><span class="line"><span class="params">pronunciation=<span class="string">""</span>, <span class="comment"># 音标</span></span></span><br><span class="line"><span class="params">chinese=<span class="string">""</span>, <span class="comment"># 中文</span></span></span><br><span class="line"><span class="params">part_of_speech=<span class="string">""</span>, <span class="comment"># 词性</span></span></span><br><span class="line"><span class="params">attri=<span class="string">""</span>, <span class="comment"># 其他属性，如是否可数</span></span></span><br><span class="line"><span class="params">example_CHN=[], <span class="comment"># 例子中文</span></span></span><br><span class="line"><span class="params">example_ENG=[], <span class="comment"># 例子英文</span></span></span><br><span class="line"><span class="params">sentence=[], <span class="comment"># 只有英文的例句</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ː"," \\textlengthmark ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ˈ"," \\textprimstress ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ɪ"," \\i ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ɔ"," \\textopeno ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ɒ"," \\textturnscripta ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ʃ"," \\textesh ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ˌ", "\\textsecstress ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ʒ"," \\textyogh ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ʌ"," \\textturnv ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ɡ"," \\textscriptg ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ɑ"," \\textscripta ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ʊ"," \\textupsilon ")</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace("ɜ"," \\textrevepsilon ")</span></span><br><span class="line">lock.acquire()</span><br><span class="line">file.write(<span class="string">"\\begin{itemize}\n"</span>)</span><br><span class="line">attri=attri.replace(<span class="string">"C"</span>,<span class="string">" $ C $ "</span>)</span><br><span class="line">attri=attri.replace(<span class="string">"U"</span>,<span class="string">" $ U $ "</span>)</span><br><span class="line">attri=attri.replace(<span class="string">"I"</span>,<span class="string">" $ I $ "</span>)</span><br><span class="line">attri=attri.replace(<span class="string">"T"</span>,<span class="string">" $ T $ "</span>)</span><br><span class="line">file.write(<span class="string">"\\item "</span>+word+<span class="string">" "</span>+pronunciation+<span class="string">" $ "</span>+part_of_speech+<span class="string">" $ "</span>+attri+<span class="string">" "</span>+chinese+<span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(example_CHN)&gt;<span class="number">0</span>:</span><br><span class="line">file.write(<span class="string">"\\begin{itemize}\n"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(example_CHN)&gt;<span class="number">3</span>:</span><br><span class="line">example_CHN.pop()</span><br><span class="line">example_ENG.pop()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(example_CHN)):</span><br><span class="line">file.write(<span class="string">"\\item[$\\diamond$] "</span>)</span><br><span class="line">file.write(example_ENG[i].text.replace(<span class="string">"$"</span>,<span class="string">" \\$ "</span>))</span><br><span class="line">file.write(<span class="string">"\n"</span>)</span><br><span class="line">file.write(example_CHN[i].text.replace(<span class="string">"%"</span>,<span class="string">" $ \\% $ "</span>))</span><br><span class="line">file.write(<span class="string">"\n"</span>)</span><br><span class="line">file.write(<span class="string">"\\end{itemize}\n"</span>)</span><br><span class="line"><span class="comment"># if len(sentence)!=0:</span></span><br><span class="line"><span class="comment"># file.write("sentence:\n")</span></span><br><span class="line"><span class="comment"># file.write("\\begin{itemize}\n")</span></span><br><span class="line"><span class="comment"># for i in sentence:</span></span><br><span class="line"><span class="comment"># file.write("\\item[$\\diamond$] ")</span></span><br><span class="line"><span class="comment"># file.write(i.text)</span></span><br><span class="line"><span class="comment"># file.write("\n")</span></span><br><span class="line"><span class="comment"># file.write("\\end{itemize}\n")</span></span><br><span class="line">file.write(<span class="string">"\\end{itemize}\n"</span>)</span><br><span class="line">lock.release()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Error occured on word "</span>+word+<span class="string">", please check the code or spelling."</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息技术 - Python - 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Templates</title>
      <link href="/2023/10/27/cpp-templates/"/>
      <url>/2023/10/27/cpp-templates/</url>
      
        <content type="html"><![CDATA[<h2 id="FastIO-from-Matrix-mlt"><a href="#FastIO-from-Matrix-mlt" class="headerlink" title="FastIO from Matrix_mlt"></a>FastIO from Matrix_mlt</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FastIO</span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="type">char</span> ibuf[SIZE], obuf[SIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">char</span> &amp;c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (c = <span class="built_in">gc</span>(); !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">*s++ = c;</span><br><span class="line">*s = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">s.<span class="built_in">push_back</span>(c);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (p3 - obuf == SIZE)</span><br><span class="line"><span class="built_in">fwrite</span>(obuf, <span class="number">1</span>, SIZE, stdout), p3 = obuf;</span><br><span class="line">*p3++ = c;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> c)</span> </span>{ <span class="built_in">pc</span>(c); }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line"><span class="built_in">pc</span>(*s), ++s;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(std::string s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">char</span> c : s)</span><br><span class="line"><span class="built_in">pc</span>(c);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(_Tp &amp;x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">f |= c == <span class="string">'-'</span>;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line"><span class="keyword">return</span> f ? x = ~x + <span class="number">1</span> : <span class="number">1</span>, <span class="built_in">void</span>();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> stk[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> tp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!x)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pc</span>(<span class="string">'0'</span>), <span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">pc</span>(<span class="string">'-'</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x)</span><br><span class="line">stk[++tp] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (tp)</span><br><span class="line"><span class="built_in">pc</span>(stk[tp--] + <span class="string">'0'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(_Tp x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">write</span>(x);</span><br><span class="line"><span class="built_in">pc</span>(<span class="string">' '</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(_Tp x)</span> </span>{ <span class="built_in">write</span>(x), <span class="built_in">pc</span>(<span class="string">'\n'</span>); }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(_Tp &amp;x, Args &amp;...args)</span> </span>{ <span class="built_in">read</span>(x), <span class="built_in">read</span>(args...); }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x, Args... args)</span> </span>{ <span class="built_in">write</span>(x), <span class="built_in">write</span>(args...); }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(_Tp x, Args... args)</span> </span>{ <span class="built_in">writesp</span>(x), <span class="built_in">writesp</span>(args...); }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(_Tp x, Args... args)</span> </span>{ <span class="built_in">writeln</span>(x), <span class="built_in">writeln</span>(args...); }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>{ <span class="built_in">fwrite</span>(obuf, p3 - obuf, <span class="number">1</span>, stdout); }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Quick-Power-calculate-a-b-mod-p-in-O-log-n"><a href="#Quick-Power-calculate-a-b-mod-p-in-O-log-n" class="headerlink" title="Quick Power (calculate a^b mod p in O(log n) )"></a>Quick Power (calculate a^b mod p in O(log n) )</h2><p>$\color{white}{\text{什么？你问我为什么不用LaTeX？我也想知道为什么标题用不了LaTeX QAQ}}$</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickpower</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> <span class="comment">// calculate $ a^b mod p $</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">a %= p;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>, base = a;</span><br><span class="line"><span class="keyword">while</span>(b){</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>){</span><br><span class="line">ans = ans * base % p;</span><br><span class="line">}</span><br><span class="line">base = base * base % p;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Balancing-Tree-in-Segtree"><a href="#Balancing-Tree-in-Segtree" class="headerlink" title="Balancing Tree in Segtree"></a>Balancing Tree in Segtree</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC target(<span class="string">"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,lzcnt,abm,bmi,bmi2,fma,tune=native"</span>)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> problemname <span class="string">"P3380"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gc() (p1 == p2 &amp;&amp; (p2 = (p1 = ibuf) + fread(ibuf, 1, SIZE, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="keyword">namespace</span> FastIO</span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="type">char</span> ibuf[SIZE], obuf[SIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">char</span> &amp;c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (c = <span class="built_in">gc</span>(); !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">*s++ = c;</span><br><span class="line">*s = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">s.<span class="built_in">push_back</span>(c);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (p3 - obuf == SIZE)</span><br><span class="line"><span class="built_in">fwrite</span>(obuf, <span class="number">1</span>, SIZE, stdout), p3 = obuf;</span><br><span class="line">*p3++ = c;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> c)</span> </span>{ <span class="built_in">pc</span>(c); }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line"><span class="built_in">pc</span>(*s), ++s;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(std::string s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">char</span> c : s)</span><br><span class="line"><span class="built_in">pc</span>(c);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(_Tp &amp;x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">f |= c == <span class="string">'-'</span>;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line"><span class="keyword">return</span> f ? x = ~x + <span class="number">1</span> : <span class="number">1</span>, <span class="built_in">void</span>();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> stk[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> tp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!x)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pc</span>(<span class="string">'0'</span>), <span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">pc</span>(<span class="string">'-'</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x)</span><br><span class="line">stk[++tp] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (tp)</span><br><span class="line"><span class="built_in">pc</span>(stk[tp--] + <span class="string">'0'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(_Tp x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">write</span>(x);</span><br><span class="line"><span class="built_in">pc</span>(<span class="string">' '</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(_Tp x)</span> </span>{ <span class="built_in">write</span>(x), <span class="built_in">pc</span>(<span class="string">'\n'</span>); }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(_Tp &amp;x, Args &amp;...args)</span> </span>{ <span class="built_in">read</span>(x), <span class="built_in">read</span>(args...); }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x, Args... args)</span> </span>{ <span class="built_in">write</span>(x), <span class="built_in">write</span>(args...); }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(_Tp x, Args... args)</span> </span>{ <span class="built_in">writesp</span>(x), <span class="built_in">writesp</span>(args...); }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(_Tp x, Args... args)</span> </span>{ <span class="built_in">writeln</span>(x), <span class="built_in">writeln</span>(args...); }</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>{ <span class="built_in">fwrite</span>(obuf, p3 - obuf, <span class="number">1</span>, stdout); }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> const constexpr</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Main</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; num = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>, cnt = <span class="number">0</span>, size = <span class="number">1</span>;</span><br><span class="line">node *son[<span class="number">2</span>] = {<span class="literal">nullptr</span>, <span class="literal">nullptr</span>}, *father = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="built_in">node</span>()</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span><br><span class="line">{</span><br><span class="line">val = a, cnt = b, size = c;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, node &amp;d, node &amp;e)</span><br><span class="line">{</span><br><span class="line">val = a, cnt = b, size = c;</span><br><span class="line">son[<span class="number">0</span>] = &amp;d, son[<span class="number">1</span>] = &amp;e;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">node *root=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(node *u)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (!u)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">u-&gt;size = (u-&gt;son[<span class="number">0</span>] ? u-&gt;son[<span class="number">0</span>]-&gt;size : <span class="number">0</span>) + (u-&gt;son[<span class="number">1</span>] ? u-&gt;son[<span class="number">1</span>]-&gt;size : <span class="number">0</span>) + u-&gt;cnt;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(node *u)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> u-&gt;father &amp;&amp; (u == (u-&gt;father-&gt;son[<span class="number">1</span>]));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(node *x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">auto</span> f1 = x-&gt;father, f2 = f1-&gt;father;</span><br><span class="line"><span class="keyword">auto</span> r1 = <span class="built_in">check</span>(x);</span><br><span class="line"><span class="keyword">if</span> (x-&gt;son[r1 ^ <span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">x-&gt;son[r1 ^ <span class="number">1</span>]-&gt;father = f1;</span><br><span class="line">f1-&gt;son[r1] = x-&gt;son[r1 ^ <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">f1-&gt;son[r1] = x-&gt;son[r1 ^ <span class="number">1</span>];</span><br><span class="line">x-&gt;son[r1 ^ <span class="number">1</span>] = f1;</span><br><span class="line">x-&gt;father = f2;</span><br><span class="line">f1-&gt;father = x;</span><br><span class="line"><span class="keyword">if</span> (f2)</span><br><span class="line">{</span><br><span class="line">f2-&gt;son[f1 == f2-&gt;son[<span class="number">1</span>]] = x;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">maintain</span>(f1), <span class="built_in">maintain</span>(x);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(node *x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> father = x-&gt;father; father = x-&gt;father, father; <span class="built_in">rotate</span>(x))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (father-&gt;father)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">rotate</span>(<span class="built_in">check</span>(x) == <span class="built_in">check</span>(father) ? father : x);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">root = x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">auto</span> cur = root;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;val == val)</span><br><span class="line">{</span><br><span class="line">++cur-&gt;cnt;</span><br><span class="line"><span class="built_in">maintain</span>(cur);</span><br><span class="line"><span class="built_in">maintain</span>(cur-&gt;father);</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// auto father = cur-&gt;father;</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;son[cur-&gt;val &lt; val])</span><br><span class="line">{</span><br><span class="line">cur = cur-&gt;son[cur-&gt;val &lt; val];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">cur-&gt;son[cur-&gt;val &lt; val] = <span class="keyword">new</span> node;</span><br><span class="line">cur-&gt;son[cur-&gt;val &lt; val]-&gt;val = val;</span><br><span class="line">++cur-&gt;son[cur-&gt;val &lt; val]-&gt;cnt;</span><br><span class="line">cur-&gt;son[cur-&gt;val &lt; val]-&gt;father = cur;</span><br><span class="line"><span class="built_in">maintain</span>(cur);</span><br><span class="line"><span class="built_in">maintain</span>(cur-&gt;son[cur-&gt;val &lt; val]);</span><br><span class="line"><span class="built_in">splay</span>(cur-&gt;son[cur-&gt;val &lt; val]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">root = <span class="keyword">new</span> node;</span><br><span class="line">root-&gt;cnt = <span class="number">1</span>;</span><br><span class="line">root-&gt;size = <span class="number">1</span>;</span><br><span class="line">root-&gt;val = val;</span><br><span class="line"><span class="built_in">maintain</span>(root);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">auto</span> cur = root;</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (k &lt; cur-&gt;val)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;son[<span class="number">0</span>])</span><br><span class="line">{</span><br><span class="line">cur = cur-&gt;son[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> now + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k&gt;cur-&gt;val)</span><br><span class="line">{</span><br><span class="line">now += (cur-&gt;son[<span class="number">0</span>] ? cur-&gt;son[<span class="number">0</span>]-&gt;size : <span class="number">0</span>);</span><br><span class="line">now += cur-&gt;cnt;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;son[<span class="number">1</span>]){</span><br><span class="line">cur = cur-&gt;son[<span class="number">1</span>];}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> now + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">now += (cur-&gt;son[<span class="number">0</span>] ? cur-&gt;son[<span class="number">0</span>]-&gt;size : <span class="number">0</span>);</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> now + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">auto</span> cur = root;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;son[<span class="number">0</span>] &amp;&amp; k &lt;= cur-&gt;son[<span class="number">0</span>]-&gt;size)</span><br><span class="line">{</span><br><span class="line">cur = cur-&gt;son[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;son[<span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">k -= cur-&gt;cnt + (cur-&gt;son[<span class="number">0</span>] ? cur-&gt;son[<span class="number">0</span>]-&gt;size : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (k &lt;= <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">}</span><br><span class="line">cur = cur-&gt;son[<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function">node *<span class="title">pre</span><span class="params">(node *x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">auto</span> cur = x-&gt;son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (!cur)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;son[<span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">cur = cur-&gt;son[<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">}</span><br><span class="line"><span class="function">node *<span class="title">nxt</span><span class="params">(node *x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">auto</span> cur = x-&gt;son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!cur)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;son[<span class="number">0</span>])</span><br><span class="line">{</span><br><span class="line">cur = cur-&gt;son[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">rk</span>(x);</span><br><span class="line"><span class="keyword">auto</span> cur = root;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;cnt &gt; <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">--cur-&gt;cnt;</span><br><span class="line"><span class="built_in">maintain</span>(cur);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (!cur-&gt;son[<span class="number">0</span>] &amp;&amp; !cur-&gt;son[<span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (!cur-&gt;son[<span class="number">0</span>])</span><br><span class="line">{</span><br><span class="line">root = cur-&gt;son[<span class="number">1</span>];</span><br><span class="line">root-&gt;father = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">auto</span> oldroot = root;</span><br><span class="line">node *x1 = <span class="built_in">pre</span>(root);</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;son[<span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">cur-&gt;son[<span class="number">1</span>]-&gt;father = x1;</span><br><span class="line">}</span><br><span class="line">x1-&gt;son[<span class="number">1</span>] = cur-&gt;son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">delete</span> oldroot;</span><br><span class="line"><span class="built_in">maintain</span>(root);</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segtree</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> cl, cr;</span><br><span class="line">node *son[<span class="number">2</span>] = {<span class="literal">nullptr</span>, <span class="literal">nullptr</span>}, *father = <span class="literal">nullptr</span>;</span><br><span class="line">Splay *tree;</span><br><span class="line"><span class="built_in">node</span>()</span><br><span class="line">{</span><br><span class="line">tree = <span class="keyword">new</span> Splay;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; *arr;</span><br><span class="line">node *root;</span><br><span class="line"><span class="built_in">Segtree</span>()</span><br><span class="line">{</span><br><span class="line">arr = <span class="literal">nullptr</span>;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">Segtree</span>(vector&lt;<span class="type">int</span>&gt; &amp;a)</span><br><span class="line">{</span><br><span class="line">arr = &amp;a;</span><br><span class="line">root = <span class="built_in">build_tree</span>(<span class="number">1</span>, arr-&gt;<span class="built_in">size</span>() - <span class="number">1</span>, <span class="literal">nullptr</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function">node *<span class="title">build_tree</span><span class="params">(<span class="type">int</span> cl, <span class="type">int</span> cr, node *fa)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">node *p = <span class="keyword">new</span> node;</span><br><span class="line">p-&gt;father = fa;</span><br><span class="line">p-&gt;cl = cl, p-&gt;cr = cr;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = arr-&gt;<span class="built_in">begin</span>() + cl; i &lt;= arr-&gt;<span class="built_in">begin</span>() + cr; i++)</span><br><span class="line">{</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">insert</span>(*i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cl == cr)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> mid = (cl + cr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">p-&gt;son[<span class="number">0</span>] = <span class="built_in">build_tree</span>(cl, mid, p);</span><br><span class="line">p-&gt;son[<span class="number">1</span>] = <span class="built_in">build_tree</span>(mid + <span class="number">1</span>, cr, p);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> val, node *p)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">del</span>(arr-&gt;<span class="built_in">at</span>(k));</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">insert</span>(val);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;cl == p-&gt;cr)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">modify</span>(k, val, p-&gt;son[(p-&gt;son[<span class="number">0</span>]-&gt;cr &lt; k)]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">modify</span>(k, val, root);</span><br><span class="line">(*arr)[k] = val;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rnk</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k, node *p)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;cl &amp;&amp; p-&gt;cr &lt;= r)</span><br><span class="line">{</span><br><span class="line"><span class="comment">// p-&gt;tree-&gt;insert(k);</span></span><br><span class="line"><span class="type">int</span> res = p-&gt;tree-&gt;<span class="built_in">rk</span>(k) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// p-&gt;tree-&gt;del(k);</span></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;son[<span class="number">0</span>]-&gt;cr)</span><br><span class="line">{</span><br><span class="line">res += <span class="built_in">rnk</span>(l, r, k, p-&gt;son[<span class="number">0</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (r &gt;= p-&gt;son[<span class="number">1</span>]-&gt;cl)</span><br><span class="line">{</span><br><span class="line">res += <span class="built_in">rnk</span>(l, r, k, p-&gt;son[<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rnk</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">rnk</span>(l, r, k, root) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val, node *p)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;cl &amp;&amp; p-&gt;cr &lt;= r)</span><br><span class="line">{</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">insert</span>(val);</span><br><span class="line"><span class="type">int</span> ans = p-&gt;tree-&gt;<span class="built_in">pre</span>(p-&gt;tree-&gt;root)-&gt;val;</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">del</span>(val);</span><br><span class="line"><span class="keyword">if</span> (ans &gt;= val)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2147483647</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> ans = INT_MIN;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;son[<span class="number">0</span>]-&gt;cr)</span><br><span class="line">{</span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">pre</span>(l, r, val, p-&gt;son[<span class="number">0</span>]));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (r &gt;= p-&gt;son[<span class="number">1</span>]-&gt;cl)</span><br><span class="line">{</span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">pre</span>(l, r, val, p-&gt;son[<span class="number">1</span>]));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pre</span>(l, r, val, root);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val, node *p)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;cl &amp;&amp; p-&gt;cr &lt;= r)</span><br><span class="line">{</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">insert</span>(val);</span><br><span class="line"><span class="type">int</span> ans = p-&gt;tree-&gt;<span class="built_in">nxt</span>(p-&gt;tree-&gt;root)-&gt;val;</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">del</span>(val);</span><br><span class="line"><span class="keyword">if</span> (ans &lt;= val)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> <span class="number">2147483647</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> ans = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;son[<span class="number">0</span>]-&gt;cr)</span><br><span class="line">{</span><br><span class="line">ans = <span class="built_in">min</span>(ans, <span class="built_in">nxt</span>(l, r, val, p-&gt;son[<span class="number">0</span>]));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (r &gt;= p-&gt;son[<span class="number">1</span>]-&gt;cl)</span><br><span class="line">{</span><br><span class="line">ans = <span class="built_in">min</span>(ans, <span class="built_in">nxt</span>(l, r, val, p-&gt;son[<span class="number">1</span>]));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">nxt</span>(l, r, val, root);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> cl = <span class="number">-1</span>, cr = <span class="number">1e8</span> + <span class="number">1</span>, mid;</span><br><span class="line"><span class="keyword">while</span> (cl &lt; cr)</span><br><span class="line">{</span><br><span class="line">mid = (cl + cr + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rnk</span>(l, r, mid) &lt;= val)</span><br><span class="line">{</span><br><span class="line">cl = mid;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">cr = mid - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> cl;</span><br><span class="line">}</span><br><span class="line">} Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">FastIO::<span class="built_in">read</span>(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, temp; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">FastIO::<span class="built_in">read</span>(temp);</span><br><span class="line">num.<span class="built_in">push_back</span>(temp);</span><br><span class="line">}</span><br><span class="line">Tree = <span class="built_in">Segtree</span>(num);</span><br><span class="line"><span class="type">int</span> opt, l, r, pos, x;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line">FastIO::<span class="built_in">read</span>(opt);</span><br><span class="line"><span class="keyword">switch</span> (opt)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(l, r, x);</span><br><span class="line">FastIO::<span class="built_in">writeln</span>(Tree.<span class="built_in">rnk</span>(l, r, x));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(l, r, x);</span><br><span class="line">FastIO::<span class="built_in">writeln</span>(Tree.<span class="built_in">kth</span>(l, r, x));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(pos, x);</span><br><span class="line">Tree.<span class="built_in">modify</span>(pos, x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(l, r, x);</span><br><span class="line">FastIO::<span class="built_in">writeln</span>(Tree.<span class="built_in">pre</span>(l, r, x));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(l, r, x);</span><br><span class="line">FastIO::<span class="built_in">writeln</span>(Tree.<span class="built_in">nxt</span>(l, r, x));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">FastIO::<span class="built_in">flush</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(problemname <span class="string">"_8.in"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(problemname <span class="string">".out"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">Main::<span class="built_in">main</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/1970/01/01/hello-world/"/>
      <url>/1970/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
