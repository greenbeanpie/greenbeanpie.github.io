<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>扩展欧拉定理(exGCD)模板</title>
      <link href="/2023/11/01/exgcd/"/>
      <url>/2023/11/01/exgcd/</url>
      
        <content type="html"><![CDATA[<p>解释：咕咕咕。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// ax+by=gcd(a,b)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">auto</span> ans <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">-=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展中国剩余定理(exCRT)模板</title>
      <link href="/2023/10/31/excrt/"/>
      <url>/2023/10/31/excrt/</url>
      
        <content type="html"><![CDATA[<p>解释等到赛前复习模板的时候再写。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">excrt</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> ll<span class="token operator">&gt;</span><span class="token operator">*</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m1 <span class="token operator">=</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> a1 <span class="token operator">=</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m2 <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> a2 <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token comment">// m_1 * x - m_2 * y = a2 - a1;</span><span class="token keyword">int</span> abgcd<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> xy <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> abgcd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a2 <span class="token operator">-</span> a1 <span class="token operator">%</span> m2 <span class="token operator">+</span> m2<span class="token punctuation">)</span> <span class="token operator">%</span> m2<span class="token punctuation">,</span> mod <span class="token operator">=</span> m2 <span class="token operator">/</span> abgcd<span class="token punctuation">;</span>x <span class="token operator">=</span> xy<span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> xy<span class="token punctuation">.</span>second<span class="token punctuation">;</span>x <span class="token operator">=</span> x <span class="token operator">*</span> c <span class="token operator">/</span> abgcd <span class="token operator">%</span> mod<span class="token punctuation">;</span>a1 <span class="token operator">+=</span> m1 <span class="token operator">*</span> x <span class="token punctuation">;</span>m1 <span class="token operator">=</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ull<span class="token punctuation">)</span>m2<span class="token punctuation">,</span> <span class="token punctuation">(</span>ull<span class="token punctuation">)</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>a1 <span class="token operator">=</span> <span class="token punctuation">(</span>a1 <span class="token operator">%</span> m1 <span class="token operator">+</span> m1<span class="token punctuation">)</span> <span class="token operator">%</span> m1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">(</span>a1 <span class="token operator">%</span> m1 <span class="token operator">+</span> m1<span class="token punctuation">)</span> <span class="token operator">%</span> m1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diary</title>
      <link href="/2023/10/31/diary/"/>
      <url>/2023/10/31/diary/</url>
      
        <content type="html"><![CDATA[<h1 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h1><h2 id="2023-10"><a href="#2023-10" class="headerlink" title="2023/10"></a>2023/10</h2><h3 id="2023-10-30"><a href="#2023-10-30" class="headerlink" title="2023/10/30"></a>2023/10/30</h3><p>喜提新外号：git push origin main -f，简称 force push 或 -f。</p><p>事件经过如下：</p><p>xhgua：为什么我的代码push不上去</p><pre class="line-numbers language-none"><code class="language-none">[remote rejected]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我：你在家里写代码了以后fetch/pull过了吗</p><p>xhgua：我fetch过了</p><p>我：git push origin main -f</p><p>xhgua：这是什么？（回车）</p><p>我：强制push参数。</p><p>A few minutes later……</p><p>xhgua：等下我的题解呢？</p><p>打开<a href="https://www.github.com/xhgua/OI">github.com</a></p><p>《force push》</p><p>喜提新外号 -f。</p><p>以及</p><p>今天怎么只写了一道绿啊啊啊啊啊，不能再颓下去了QAQ</p><h2 id="2023-10-31"><a href="#2023-10-31" class="headerlink" title="2023/10/31"></a>2023/10/31</h2><p>上午生物课又上自由组合定律，不想再听CSP初赛的排列组合了QAQ</p><p>晚上 21:55：</p><p>多测不清空，保龄两行泪。</p><h2 id="2023-11"><a href="#2023-11" class="headerlink" title="2023/11"></a>2023/11</h2><h3 id="2023-11-01"><a href="#2023-11-01" class="headerlink" title="2023/11/01"></a>2023/11/01</h3><p>昨天只打了一道题目，不能再颓了 /kk</p><p>上午政治课被换成了化学课，明天下午可以来三节哩（喜</p><p>写了一道难度和思维都是橙的蓝题，预计今天降橙。</p><p>下午又是模拟赛。上次题目还没来得及补就模拟赛。</p><p>什么时候停课啊。</p><p>咕咕咕。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡树 (Balancing Tree) 模板</title>
      <link href="/2023/10/30/balancing-tree-template/"/>
      <url>/2023/10/30/balancing-tree-template/</url>
      
        <content type="html"><![CDATA[<h2 id="无旋Treap-FHQ-Treap"><a href="#无旋Treap-FHQ-Treap" class="headerlink" title="无旋Treap(FHQ Treap)"></a>无旋Treap(FHQ Treap)</h2><p>蒟蒻不会写。</p><p>咕咕咕。</p><h2 id="伸展树-Splay-Tree"><a href="#伸展树-Splay-Tree" class="headerlink" title="伸展树(Splay Tree)"></a>伸展树(Splay Tree)</h2><p>注意:rnk操作需要保证数据合法（给定的数存在）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Splay</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>node <span class="token operator">*</span>son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>father <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>val <span class="token operator">=</span> a<span class="token punctuation">,</span> cnt <span class="token operator">=</span> b<span class="token punctuation">,</span> size <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> node <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> node <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>val <span class="token operator">=</span> a<span class="token punctuation">,</span> cnt <span class="token operator">=</span> b<span class="token punctuation">,</span> size <span class="token operator">=</span> c<span class="token punctuation">;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>node <span class="token operator">*</span>root<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">maintain</span><span class="token punctuation">(</span>node <span class="token operator">*</span>u<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>u<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> u<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> u<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> u<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>node <span class="token operator">*</span>u<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token operator">-&gt;</span>father <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>father<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>node <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">auto</span> f1 <span class="token operator">=</span> x<span class="token operator">-&gt;</span>father<span class="token punctuation">,</span> f2 <span class="token operator">=</span> f1<span class="token operator">-&gt;</span>father<span class="token punctuation">;</span><span class="token keyword">auto</span> r1 <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>father <span class="token operator">=</span> f1<span class="token punctuation">;</span>f1<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>r1<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>f1<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>r1<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">;</span>x<span class="token operator">-&gt;</span>father <span class="token operator">=</span> f2<span class="token punctuation">;</span>f1<span class="token operator">-&gt;</span>father <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">{</span>f2<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>f1 <span class="token operator">==</span> f2<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">maintain</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maintain</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">splay</span><span class="token punctuation">(</span>node <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> father <span class="token operator">=</span> x<span class="token operator">-&gt;</span>father<span class="token punctuation">;</span> father <span class="token operator">=</span> x<span class="token operator">-&gt;</span>father<span class="token punctuation">,</span> father<span class="token punctuation">;</span> <span class="token function">rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>father<span class="token operator">-&gt;</span>father<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">check</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span> <span class="token operator">?</span> father <span class="token operator">:</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>root <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">++</span>cur<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// auto father = cur-&gt;father;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">;</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token operator">++</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token operator">-&gt;</span>father <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>root <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">rk</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> cur<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>now <span class="token operator">+=</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> cur<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>now <span class="token operator">+=</span> cur<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>now <span class="token operator">+=</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">kth</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k <span class="token operator">-=</span> cur<span class="token operator">-&gt;</span>cnt <span class="token operator">+</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> cur<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span>cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> cur<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>node <span class="token operator">*</span><span class="token function">pre</span><span class="token punctuation">(</span>node <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> x<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>node <span class="token operator">*</span><span class="token function">nxt</span><span class="token punctuation">(</span>node <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> x<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">rk</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>cnt <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">--</span>cur<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>root <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>root <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>father <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">auto</span> oldroot <span class="token operator">=</span> root<span class="token punctuation">;</span>node <span class="token operator">*</span>x1 <span class="token operator">=</span> <span class="token function">pre</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>father <span class="token operator">=</span> x1<span class="token punctuation">;</span><span class="token punctuation">}</span>x1<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> oldroot<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> tree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红黑树-RB-Tree-Red-Black-Tree"><a href="#红黑树-RB-Tree-Red-Black-Tree" class="headerlink" title="红黑树(RB Tree/Red-Black Tree)"></a>红黑树(RB Tree/Red-Black Tree)</h2><p>理论上来说根据 GPL v2 可以自由分发，所以在这里贴上作者应该就不是什么大问题了（确信）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// SPDX-License-Identifier: GPL-2.0-or-later</span><span class="token comment">/*  Red Black Trees  (C) 1999  Andrea Arcangeli &lt;andrea@suse.de&gt;  (C) 2002  David Woodhouse &lt;dwmw2@infradead.org&gt;  (C) 2012  Michel Lespinasse &lt;walken@google.com&gt;  linux/lib/rbtree.c*/</span><span class="token comment">// #include &lt;linux/rbtree_augmented.h&gt;</span><span class="token comment">// #include &lt;linux/export.h&gt;</span><span class="token comment">/* * red-black trees properties:  https://en.wikipedia.org/wiki/Rbtree * *  1) A node is either red or black *  2) The root is black *  3) All leaves (NULL) are black *  4) Both children of every red node are black *  5) Every simple path from root to leaves contains the same number *     of black nodes. * *  4 and 5 give the O(log n) guarantee, since 4 implies you cannot have two *  consecutive red nodes in a path and every red node is therefore followed by *  a black. So if B is the number of black nodes on every simple path (as per *  5), then the longest possible path due to 4 is 2B. * *  We shall indicate color with case, where black nodes are uppercase and red *  nodes will be lowercase. Unknown color nodes shall be drawn as red within *  parentheses and have some accompanying text comment. */</span><span class="token comment">/* * Notes on lockless lookups: * * All stores to the tree structure (rb_left and rb_right) must be done using * WRITE_ONCE(). And we must not inadvertently cause (temporary) loops in the * tree structure as seen in program order. * * These two requirements will allow lockless iteration of the tree -- not * correct iteration mind you, tree rotations are not atomic so a lookup might * miss entire subtrees. * * But they do guarantee that any such traversal will only see valid elements * and that it will indeed complete -- does not get stuck in a loop. * * It also guarantees that if the lookup returns an element it is the 'correct' * one. But not returning an element does _NOT_ mean it's not present. * * NOTE: * * Stores to __rb_parent_color are not important for simple lookups so those * are left undone as of now. Nor did I check for loops involving parent * pointers. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">rb_set_black</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>rb<span class="token punctuation">)</span><span class="token punctuation">{</span>rb<span class="token operator">-&gt;</span>__rb_parent_color <span class="token operator">+=</span> RB_BLACK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token function">rb_red_parent</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>red<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token punctuation">)</span>red<span class="token operator">-&gt;</span>__rb_parent_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * Helper function for rotations: * - old's parent and color get assigned to new * - old gets assigned new as a parent and 'color' as a color. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token function">__rb_rotate_set_parents</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">-&gt;</span>__rb_parent_color <span class="token operator">=</span> old<span class="token operator">-&gt;</span>__rb_parent_color<span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__rb_change_child</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span><span class="token function">__rb_insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>augment_rotate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token function">rb_red_parent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>gparent<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* * Loop invariant: node is red. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* * The inserted node is root. Either this is the * first node, or we recursed at Case 1 below and * are no longer violating 4). */</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * If there is a black parent, we are done. * Otherwise, take some corrective action as, * per 4), we don't want a red root or two * consecutive red nodes. */</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rb_is_black</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>gparent <span class="token operator">=</span> <span class="token function">rb_red_parent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> gparent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* parent == gparent-&gt;rb_left */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&amp;&amp;</span> <span class="token function">rb_is_red</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* * Case 1 - node's uncle is red (color flips). * *       G            g *      / \          / \ *     p   u  --&gt;   P   U *    /            / *   n            n * * However, since g's parent might be red, and * 4) does not allow this, we need to recurse * at g. */</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> gparent<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> gparent<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>node <span class="token operator">=</span> gparent<span class="token punctuation">;</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>tmp <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* * Case 2 - node's uncle is black and node is * the parent's right child (left rotate at parent). * *      G             G *     / \           / \ *    p   U  --&gt;    n   U *     \           / *      n         p * * This still leaves us in violation of 4), the * continuation into Case 3 will fix that. */</span>tmp <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>    RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> node<span class="token punctuation">,</span> RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>parent <span class="token operator">=</span> node<span class="token punctuation">;</span>tmp <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * Case 3 - node's uncle is black and node is * the parent's left child (right rotate at gparent). * *        G           P *       / \         / \ *      p   U  --&gt;  n   g *     /                 \ *    n                   U */</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>gparent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* == parent-&gt;rb_right */</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> gparent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> gparent<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__rb_rotate_set_parents</span><span class="token punctuation">(</span>gparent<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> root<span class="token punctuation">,</span> RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>gparent<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>tmp <span class="token operator">=</span> gparent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&amp;&amp;</span> <span class="token function">rb_is_red</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Case 1 - color flips */</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> gparent<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> gparent<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>node <span class="token operator">=</span> gparent<span class="token punctuation">;</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>tmp <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Case 2 - right rotate at parent */</span>tmp <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>    RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> node<span class="token punctuation">,</span> RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>parent <span class="token operator">=</span> node<span class="token punctuation">;</span>tmp <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Case 3 - left rotate at gparent */</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>gparent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* == parent-&gt;rb_left */</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> gparent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> gparent<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__rb_rotate_set_parents</span><span class="token punctuation">(</span>gparent<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> root<span class="token punctuation">,</span> RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>gparent<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* * Inline version for rb_erase() use - we want to be able to inline * and eliminate the dummy_rotate callback there */</span><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span><span class="token function">____rb_erase_color</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>augment_rotate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>sibling<span class="token punctuation">,</span> <span class="token operator">*</span>tmp1<span class="token punctuation">,</span> <span class="token operator">*</span>tmp2<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* * Loop invariants: * - node is black (or NULL on first iteration) * - node is not the root (parent is not NULL) * - All leaf paths going through parent and node have a *   black node count that is 1 lower than other leaf paths. */</span>sibling <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> sibling<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* node == parent-&gt;rb_left */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rb_is_red</span><span class="token punctuation">(</span>sibling<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* * Case 1 - left rotate at parent * *     P               S *    / \             / \ *   N   s    --&gt;    p   Sr *      / \         / \ *     Sl  Sr      N   Sl */</span>tmp1 <span class="token operator">=</span> sibling<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>sibling<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__rb_rotate_set_parents</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sibling<span class="token punctuation">,</span> root<span class="token punctuation">,</span>RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>sibling <span class="token operator">=</span> tmp1<span class="token punctuation">;</span><span class="token punctuation">}</span>tmp1 <span class="token operator">=</span> sibling<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp1 <span class="token operator">||</span> <span class="token function">rb_is_black</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>tmp2 <span class="token operator">=</span> sibling<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp2 <span class="token operator">||</span> <span class="token function">rb_is_black</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* * Case 2 - sibling color flip * (p could be either color here) * *    (p)           (p) *    / \           / \ *   N   S    --&gt;  N   s *      / \           / \ *     Sl  Sr        Sl  Sr * * This leaves us violating 5) which * can be fixed by flipping p to black * if it was red, or by recursing at p. * p is red when coming from Case 1. */</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>    RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rb_is_red</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">rb_set_black</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span>node <span class="token operator">=</span> parent<span class="token punctuation">;</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * Case 3 - right rotate at sibling * (p could be either color here) * *   (p)           (p) *   / \           / \ *  N   S    --&gt;  N   sl *     / \             \ *    sl  Sr            S *                       \ *                        Sr * * Note: p might be red, and then both * p and sl are red after rotation(which * breaks property 4). This is fixed in * Case 4 (in __rb_rotate_set_parents() *         which set sl the color of p *         and set p RB_BLACK) * *   (p)            (sl) *   / \            /  \ *  N   sl   --&gt;   P    S *       \        /      \ *        S      N        Sr *         \ *          Sr */</span>tmp1 <span class="token operator">=</span> tmp2<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>sibling<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>tmp2<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> sibling<span class="token punctuation">,</span>    RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp1 <span class="token operator">=</span> sibling<span class="token punctuation">;</span>sibling <span class="token operator">=</span> tmp2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * Case 4 - left rotate at parent + color flips * (p and sl could be either color here. *  After rotation, p becomes black, s acquires *  p's color, and sl keeps its color) * *      (p)             (s) *      / \             / \ *     N   S     --&gt;   P   Sr *        / \         / \ *      (sl) sr      N  (sl) */</span>tmp2 <span class="token operator">=</span> sibling<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>sibling<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> sibling<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token function">rb_set_parent</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__rb_rotate_set_parents</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sibling<span class="token punctuation">,</span> root<span class="token punctuation">,</span>RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>sibling <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rb_is_red</span><span class="token punctuation">(</span>sibling<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Case 1 - right rotate at parent */</span>tmp1 <span class="token operator">=</span> sibling<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>sibling<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__rb_rotate_set_parents</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sibling<span class="token punctuation">,</span> root<span class="token punctuation">,</span>RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>sibling <span class="token operator">=</span> tmp1<span class="token punctuation">;</span><span class="token punctuation">}</span>tmp1 <span class="token operator">=</span> sibling<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp1 <span class="token operator">||</span> <span class="token function">rb_is_black</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>tmp2 <span class="token operator">=</span> sibling<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp2 <span class="token operator">||</span> <span class="token function">rb_is_black</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Case 2 - sibling color flip */</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>    RB_RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rb_is_red</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">rb_set_black</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span>node <span class="token operator">=</span> parent<span class="token punctuation">;</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Case 3 - left rotate at sibling */</span>tmp1 <span class="token operator">=</span> tmp2<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>sibling<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>tmp2<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> sibling<span class="token punctuation">,</span>    RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp1 <span class="token operator">=</span> sibling<span class="token punctuation">;</span>sibling <span class="token operator">=</span> tmp2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Case 4 - right rotate at parent + color flips */</span>tmp2 <span class="token operator">=</span> sibling<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WRITE_ONCE</span><span class="token punctuation">(</span>sibling<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rb_set_parent_color</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> sibling<span class="token punctuation">,</span> RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token function">rb_set_parent</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__rb_rotate_set_parents</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sibling<span class="token punctuation">,</span> root<span class="token punctuation">,</span>RB_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">augment_rotate</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* Non-inline version for rb_erase_augmented() use */</span><span class="token keyword">void</span> <span class="token function">__rb_erase_color</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>augment_rotate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">____rb_erase_color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> root<span class="token punctuation">,</span> augment_rotate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>__rb_erase_color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * Non-augmented rbtree manipulation functions. * * We use dummy augmented callbacks here, and have the compiler optimize them * out of the rb_insert_color() and rb_erase() function definitions. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dummy_propagate</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dummy_copy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dummy_rotate</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_augment_callbacks</span> dummy_callbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>propagate <span class="token operator">=</span> dummy_propagate<span class="token punctuation">,</span><span class="token punctuation">.</span>copy <span class="token operator">=</span> dummy_copy<span class="token punctuation">,</span><span class="token punctuation">.</span>rotate <span class="token operator">=</span> dummy_rotate<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">rb_insert_color</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">__rb_insert</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token punctuation">,</span> dummy_rotate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_insert_color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">rb_erase</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>rebalance<span class="token punctuation">;</span>rebalance <span class="token operator">=</span> <span class="token function">__rb_erase_augmented</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dummy_callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rebalance<span class="token punctuation">)</span><span class="token function">____rb_erase_color</span><span class="token punctuation">(</span>rebalance<span class="token punctuation">,</span> root<span class="token punctuation">,</span> dummy_rotate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_erase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * Augmented rbtree manipulation functions. * * This instantiates the same __always_inline functions as in the non-augmented * case, but this time with user-defined callbacks. */</span><span class="token keyword">void</span> <span class="token function">__rb_insert_augmented</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>augment_rotate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">__rb_insert</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token punctuation">,</span> augment_rotate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>__rb_insert_augmented<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * This function returns the first node (in sort order) of the tree. */</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token function">rb_first</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span><span class="token operator">*</span>n<span class="token punctuation">;</span>n <span class="token operator">=</span> root<span class="token operator">-&gt;</span>rb_node<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">)</span>n <span class="token operator">=</span> n<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token function">rb_last</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span><span class="token operator">*</span>n<span class="token punctuation">;</span>n <span class="token operator">=</span> root<span class="token operator">-&gt;</span>rb_node<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span>n <span class="token operator">=</span> n<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token function">rb_next</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RB_EMPTY_NODE</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">/* * If we have a right-hand child, go down and then left as far * as we can. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span> <span class="token punctuation">{</span>node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">)</span>node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token punctuation">)</span>node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * No right-hand children. Everything down and left is smaller than us, * so any 'next' node must be in the general direction of our parent. * Go up the tree; any time the ancestor is a right-hand child of its * parent, keep going up. First time it's a left-hand child of its * parent, said parent is our 'next' node. */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> node <span class="token operator">==</span> parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span>node <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token keyword">return</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token function">rb_prev</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RB_EMPTY_NODE</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">/* * If we have a left-hand child, go down and then right as far * as we can. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">)</span> <span class="token punctuation">{</span>node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span>node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token punctuation">)</span>node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * No left-hand children. Go up till we find an ancestor which * is a right-hand child of its parent. */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> node <span class="token operator">==</span> parent<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">)</span>node <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token keyword">return</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">rb_replace_node</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>victim<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">,</span>     <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Copy the pointers/colour from the victim to the replacement */</span><span class="token operator">*</span><span class="token keyword">new</span> <span class="token operator">=</span> <span class="token operator">*</span>victim<span class="token punctuation">;</span><span class="token comment">/* Set the surrounding nodes to point to the replacement */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">)</span><span class="token function">rb_set_parent</span><span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span><span class="token function">rb_set_parent</span><span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__rb_change_child</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_replace_node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">rb_replace_node_rcu</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>victim<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Copy the pointers/colour from the victim to the replacement */</span><span class="token operator">*</span><span class="token keyword">new</span> <span class="token operator">=</span> <span class="token operator">*</span>victim<span class="token punctuation">;</span><span class="token comment">/* Set the surrounding nodes to point to the replacement */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">)</span><span class="token function">rb_set_parent</span><span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span><span class="token function">rb_set_parent</span><span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Set the parent's pointer to the new node last after an RCU barrier * so that the pointers onwards are seen to be set correctly when doing * an RCU walk over the tree. */</span><span class="token function">__rb_change_child_rcu</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_replace_node_rcu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token function">rb_left_deepest_node</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">)</span>node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_left<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span>node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token punctuation">)</span>node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token function">rb_next_postorder</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>parent <span class="token operator">=</span> <span class="token function">rb_parent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* If we're sitting on node, we've already seen our children */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> node <span class="token operator">==</span> parent<span class="token operator">-&gt;</span>rb_left <span class="token operator">&amp;&amp;</span> parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* If we are the parent's left node, go to the parent's right * node then all the way down to the left */</span><span class="token keyword">return</span> <span class="token function">rb_left_deepest_node</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>rb_right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token comment">/* Otherwise we are the parent's right node, and the parent * should be next */</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token punctuation">)</span>parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_next_postorder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token function">rb_first_postorder</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>rb_node<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">rb_left_deepest_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rb_node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>rb_first_postorder<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cambridge dictionary 单词查询程序</title>
      <link href="/2023/10/29/cambridge-dictionary-query-program/"/>
      <url>/2023/10/29/cambridge-dictionary-query-program/</url>
      
        <content type="html"><![CDATA[<p>程序会自动从 <code>word.in</code> 中获取信息并输出结果，输入格式如下：</p><p>第一行 $ n $ 为书本数量，以下有 $ n $ 组数据，每组的第一行为书本名称，第二行为页数 $ m $ ，下有 $ m $ 组数据，每组的第 $ 1~3 $ 行 分别为页码、标题和单词数量 $ k $ ，下有 $ k $ 个单词。</p><p>程序会自动输出 test.tex 。</p><p>请确保你安装了 requests、bs4、lxml模块。</p><p>请将以下两个文件放到同一个目录下运行。</p><p>main.py:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span><span class="token comment"># encoding=utf-8</span><span class="token keyword">import</span> requests<span class="token punctuation">,</span> os<span class="token punctuation">,</span> sys<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> write <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># from tqdm import tqdm</span><span class="token keyword">from</span> requests<span class="token punctuation">.</span>adapters <span class="token keyword">import</span> HTTPAdapter<span class="token keyword">from</span> requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>util<span class="token punctuation">.</span>retry <span class="token keyword">import</span> Retryos<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/Something else/20231019/"</span><span class="token punctuation">)</span>head <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\\documentclass[a4paper,margin=1.0cm,10.5pt]&#123;book&#125;\\usepackage[UTF8]&#123;ctex&#125;\\usepackage&#123;tipa&#125;\\usepackage&#123;color&#125;\\usepackage&#123;geometry&#125;\\usepackage&#123;fontspec&#125;\\usepackage&#123;xcolor&#125;\\usepackage&#123;titlesec&#125;\\defaultfontfeatures&#123;Ligatures=TeX&#125;\\setmainfont&#123;Times New Roman&#125;\\renewcommand&#123;\\large&#125;&#123;\\fontsize&#123;14pt&#125;&#123;\\baselineskip&#125;\\selectfont&#125;\\definecolor&#123;Purple&#125;&#123;rgb&#125;&#123;.256,.0,.511&#125;\\newfontfamily\\sectionfont[Color=Purple]&#123;Times New Roman&#125;\\titleformat*&#123;\\section&#125;&#123;\\large\\bfseries\\sffamily\\color&#123;Purple&#125;&#125;\\begin&#123;document&#125;\\title&#123;Vocabulary&#125;\\maketitle\\pagenumbering&#123;roman&#125;\\tableofcontents\\newpage\\pagenumbering&#123;arabic&#125;"""</span>tail <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\\end&#123;document&#125;"""</span>header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">'XSRF-TOKEN=091b0a7e-7b7c-440f-82ba-7853a686d0e8; preferredDictionaries="english-chinese-simplified,english-chinese-traditional,english,british-grammar"; _ga=GA1.3.1985437458.1697684466; _gid=GA1.3.1397756659.1697684466; amp-access=amp-DgWec-PNndO292HPfqJugg; _hjFirstSeen=1; _hjSession_2790984=eyJpZCI6Ijc4ZmUwMGE3LTM0MjQtNGNhNi1hMjYwLTE3Yjc3YmQxMTE0MSIsImNyZWF0ZWQiOjE2OTc2ODQ0Njc0NTcsImluU2FtcGxlIjpmYWxzZSwic2Vzc2lvbml6ZXJCZXRhRW5hYmxlZCI6dHJ1ZX0=; _sp_ses.7ecc=*; OptanonConsent=isGpcEnabled=0&amp;datestamp=Thu+Oct+19+2023+11%3A01%3A20+GMT%2B0800+(China+Standard+Time)&amp;version=202308.1.0&amp;browserGpcFlag=0&amp;isIABGlobal=false&amp;hosts=&amp;landingPath=NotLandingPage&amp;groups=C0001%3A1%2CC0002%3A1%2CC0003%3A1%2CC0004%3A0&amp;AwaitingReconsent=false; _sp_id.7ecc=3979def0-c2d7-4674-82ae-82dabd30e180.1697684468.1.1697684480..0b270403-3325-4540-80fe-b9939b45295d....0; _hjSessionUser_2790984=eyJpZCI6IjllMjU2Zjk3LTU5ZjAtNWNhYi1hYzI4LWUyZDlhYmIzOGY4ZiIsImNyZWF0ZWQiOjE2OTc2ODQ0Njc0NTcsImV4aXN0aW5nIjp0cnVlfQ==; _gat=1; iawsc1m=1; _sharedID=54582c27-481b-45f6-af8b-567598974fc2; _sharedID_cst=zix7LPQsHA%3D%3D; _pbjs_userid_consent_data=3524755945110770; _sharedid=0362b518-b56a-4a08-9f01-687b29d9e710; _lr_retry_request=true; _lr_env_src_ats=false; pbjs-unifiedid=%7B%22TDID%22%3A%22b82f813d-b87d-406b-920c-4d28ffdd6e63%22%2C%22TDID_LOOKUP%22%3A%22TRUE%22%2C%22TDID_CREATED_AT%22%3A%222023-09-19T03%3A10%3A42%22%7D; pbjs-unifiedid_cst=zix7LPQsHA%3D%3D; loginPopup=5; _ga_L9GCR21SZ7=GS1.3.1697684466.1.1.1697685069.27.0.0; iawpvccs=4; iawpvc=4; iawpvtc1m=4; cto_bundle=-fkA8F9VeGgzOEh2TlVBQyUyQnowREg4QkhxZlY5USUyQnRrdSUyQmQ3ZHFlSTRJJTJCTmppNmt1WCUyRlFxQWhKSlNKN1d6T0NwU3Z1RUx6WmUxSmxqOWd4RHROekZuclFJZCUyRjZQYnNyTjVoSmRpUzBpSyUyQmdGWnI3bHFVZFZ4Q3YzU1hxd0JQZmMlMkJFV0NUZjAlMkZuQm96NU9BNU14M2RVSkxaS0ElM0QlM0Q; cto_bidid=PEgR8V9vZWpoUjBET21nT0lHSUhkZUMySG1WZUhYMDJFbGxmUUR5cFJxUTZhejNRY3lmNWFDZlJrRjlJTDRoMnNxQTFlaTJKd3U3Z3BWdmx0S3FBNXZVZU8xMEZmbUQwVUZKRXpRdFNqSFZYZ3RQdyUzRA'</span><span class="token punctuation">,</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46"</span><span class="token punctuation">,</span><span class="token string">"sec-ch-ua-mobile"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.tex"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span>stdin <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"word.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token comment"># book = input("请输入书本:")</span>cntbook <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># templine.set_description("Processing "+nowpage)</span>word <span class="token operator">=</span> word<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span>word <span class="token operator">=</span> word<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>retry <span class="token operator">=</span> Retry<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">114514</span><span class="token punctuation">,</span> backoff_factor<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>adapter <span class="token operator">=</span> HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span>retry<span class="token punctuation">)</span>session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">,</span> adapter<span class="token punctuation">)</span>session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">,</span> adapter<span class="token punctuation">)</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://dictionary.cambridge.org/dictionary/english-chinese-simplified/"</span><span class="token operator">+</span> word<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span><span class="token punctuation">)</span>contentori <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>word <span class="token operator">=</span> contentori<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"hw dhw"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error occured on word "</span><span class="token operator">+</span>word<span class="token operator">+</span><span class="token string">", please check the code or spelling."</span><span class="token punctuation">)</span><span class="token comment"># tempfile = open("test.out","r")</span><span class="token comment"># temptext = tempfile.read()</span><span class="token comment"># tempfile.close()</span><span class="token comment"># content = BeautifulSoup(temptext ,"lxml")</span><span class="token comment"># print(content)</span><span class="token keyword">try</span><span class="token punctuation">:</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> content1 <span class="token keyword">in</span> contentori<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"pr entry-body__el"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>temp <span class="token operator">=</span> content1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"pr dsense"</span><span class="token punctuation">)</span>pronoun<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">try</span><span class="token punctuation">:</span>pronoun <span class="token operator">=</span> content1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"pron dpron"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">try</span><span class="token punctuation">:</span>part_of_speech <span class="token operator">=</span> content1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"pos dsense_pos"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token keyword">except</span><span class="token punctuation">:</span>part_of_speech <span class="token operator">=</span> content1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"pos dpos"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textattri<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">try</span><span class="token punctuation">:</span>attri <span class="token operator">=</span> content1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"dgram"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">pass</span>temp2 <span class="token operator">=</span> content1<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"def-block ddef_block"</span><span class="token punctuation">)</span><span class="token keyword">for</span> content <span class="token keyword">in</span> temp2<span class="token punctuation">:</span>chinese <span class="token operator">=</span> content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"trans dtrans dtrans-se break-cj"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token keyword">try</span><span class="token punctuation">:</span>attri <span class="token operator">=</span> content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"dgram"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">pass</span>describe <span class="token operator">=</span> content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"guideword dsense_gw"</span><span class="token punctuation">)</span>example_ENG <span class="token operator">=</span> content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"eg deg"</span><span class="token punctuation">)</span>example_CHI <span class="token operator">=</span> content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"trans dtrans dtrans-se hdb break-cj"</span><span class="token punctuation">)</span>sentence <span class="token operator">=</span> content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"eg dexamp hax"</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span>word<span class="token punctuation">,</span>pronoun<span class="token punctuation">,</span>chinese<span class="token punctuation">,</span>part_of_speech<span class="token punctuation">,</span>attri<span class="token punctuation">,</span>example_CHI<span class="token punctuation">,</span>example_ENG<span class="token punctuation">,</span>sentence<span class="token punctuation">,</span><span class="token punctuation">)</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># else:</span><span class="token comment"># # content = temp[0]</span><span class="token comment"># chinese = contentori.find_all(</span><span class="token comment"># "span", class_="trans dtrans dtrans-se break-cj"</span><span class="token comment"># )[0].text</span><span class="token comment"># part_of_speech = ""</span><span class="token comment"># try:</span><span class="token comment"># part_of_speech = contentori.find_all("span", class_="pos dpos")[0].text</span><span class="token comment"># except IndexError:</span><span class="token comment"># part_of_speech = contentori.find_all("span", class_="pos dsense_pos")[</span><span class="token comment"># 0</span><span class="token comment"># ].text</span><span class="token comment"># attri = ""</span><span class="token comment"># try:</span><span class="token comment"># attri = contentori.find_all("span", class_="dgram")[0].text</span><span class="token comment"># except:</span><span class="token comment"># pass</span><span class="token comment"># describe = contentori.find_all("span", class_="guideword dsense_gw")</span><span class="token comment"># example_ENG = contentori.find_all("span", class_="eg deg")</span><span class="token comment"># example_CHI = contentori.find_all(</span><span class="token comment"># "span", class_="trans dtrans dtrans-se hdb break-cj"</span><span class="token comment"># )</span><span class="token comment"># sentence = contentori.find_all("li", class_="eg dexamp hax")</span><span class="token comment"># write(</span><span class="token comment"># file,</span><span class="token comment"># word,</span><span class="token comment"># pronoun,</span><span class="token comment"># chinese,</span><span class="token comment"># part_of_speech,</span><span class="token comment"># attri,</span><span class="token comment"># example_CHI,</span><span class="token comment"># example_ENG,</span><span class="token comment"># sentence,</span><span class="token comment"># )</span><span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error occured on word "</span><span class="token operator">+</span>word<span class="token operator">+</span><span class="token string">", please check the code or spelling."</span><span class="token punctuation">)</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># file.write("\n\n\n")</span><span class="token keyword">for</span> nowbook <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cntbook<span class="token punctuation">)</span><span class="token punctuation">:</span>book <span class="token operator">=</span> stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>page <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\\chapter&#123;"</span> <span class="token operator">+</span> book <span class="token operator">+</span> <span class="token string">"&#125;\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># temp = stdin.readline().split()</span>nowpage <span class="token operator">=</span> stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token comment"># print("processing "+nowpage)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\\textcolor[RGB]&#123;128,0,255&#125;&#123;\\section&#123;"</span><span class="token operator">+</span> book<span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span> nowpage<span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span> stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"&#125;&#125;\n"</span><span class="token punctuation">)</span><span class="token comment"># file.write("\\begin&#123;enumerate&#125;\n")</span><span class="token comment"># cnt = int(stdin.readline())</span>cnt<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>words<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>words<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># words = stdin.readline()</span>threadings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>threadings<span class="token punctuation">.</span>append<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>solve<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span>word<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threadings<span class="token punctuation">:</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># for t in threadings:</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>write.py:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span><span class="token comment"># encoding=utf-8</span><span class="token keyword">import</span> threadingshape <span class="token operator">=</span> <span class="token string">""</span>lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token comment"># 要写入的文件</span>word<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment"># 原文</span>pronunciation<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment"># 音标</span>chinese<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment"># 中文</span>part_of_speech<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment"># 词性</span>attri<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment"># 其他属性，如是否可数</span>example_CHN<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 例子中文</span>example_ENG<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 例子英文</span>sentence<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 只有英文的例句</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token comment"># pronunciation=pronunciation.replace("ː"," \\textlengthmark ")</span><span class="token comment"># pronunciation=pronunciation.replace("ˈ"," \\textprimstress ")</span><span class="token comment"># pronunciation=pronunciation.replace("ɪ"," \\i ")</span><span class="token comment"># pronunciation=pronunciation.replace("ɔ"," \\textopeno ")</span><span class="token comment"># pronunciation=pronunciation.replace("ɒ"," \\textturnscripta ")</span><span class="token comment"># pronunciation=pronunciation.replace("ʃ"," \\textesh ")</span><span class="token comment"># pronunciation=pronunciation.replace("ˌ", "\\textsecstress ")</span><span class="token comment"># pronunciation=pronunciation.replace("ʒ"," \\textyogh ")</span><span class="token comment"># pronunciation=pronunciation.replace("ʌ"," \\textturnv ")</span><span class="token comment"># pronunciation=pronunciation.replace("ɡ"," \\textscriptg ")</span><span class="token comment"># pronunciation=pronunciation.replace("ɑ"," \\textscripta ")</span><span class="token comment"># pronunciation=pronunciation.replace("ʊ"," \\textupsilon ")</span><span class="token comment"># pronunciation=pronunciation.replace("ɜ"," \\textrevepsilon ")</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\\begin&#123;itemize&#125;\n"</span><span class="token punctuation">)</span>attri<span class="token operator">=</span>attri<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">" $ C $ "</span><span class="token punctuation">)</span>attri<span class="token operator">=</span>attri<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"U"</span><span class="token punctuation">,</span><span class="token string">" $ U $ "</span><span class="token punctuation">)</span>attri<span class="token operator">=</span>attri<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token string">" $ I $ "</span><span class="token punctuation">)</span>attri<span class="token operator">=</span>attri<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">,</span><span class="token string">" $ T $ "</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\\item "</span><span class="token operator">+</span>word<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>pronunciation<span class="token operator">+</span><span class="token string">" $ "</span><span class="token operator">+</span>part_of_speech<span class="token operator">+</span><span class="token string">" $ "</span><span class="token operator">+</span>attri<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>chinese<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>example_CHN<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\\begin&#123;itemize&#125;\n"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>example_CHN<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">:</span>example_CHN<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>example_ENG<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>example_CHN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\\item[$\\diamond$] "</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>example_ENG<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span><span class="token string">" \\$ "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>example_CHN<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span><span class="token string">" $ \\% $ "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\\end&#123;itemize&#125;\n"</span><span class="token punctuation">)</span><span class="token comment"># if len(sentence)!=0:</span><span class="token comment"># file.write("sentence:\n")</span><span class="token comment"># file.write("\\begin&#123;itemize&#125;\n")</span><span class="token comment"># for i in sentence:</span><span class="token comment"># file.write("\\item[$\\diamond$] ")</span><span class="token comment"># file.write(i.text)</span><span class="token comment"># file.write("\n")</span><span class="token comment"># file.write("\\end&#123;itemize&#125;\n")</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\\end&#123;itemize&#125;\n"</span><span class="token punctuation">)</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error occured on word "</span><span class="token operator">+</span>word<span class="token operator">+</span><span class="token string">", please check the code or spelling."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Templates</title>
      <link href="/2023/10/27/cpp-templates/"/>
      <url>/2023/10/27/cpp-templates/</url>
      
        <content type="html"><![CDATA[<h2 id="FastIO-from-Matrix-mlt"><a href="#FastIO-from-Matrix-mlt" class="headerlink" title="FastIO from Matrix_mlt"></a>FastIO from Matrix_mlt</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> FastIO<span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> SIZE <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">char</span> ibuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> obuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> ibuf<span class="token punctuation">,</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> ibuf<span class="token punctuation">,</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> obuf<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>s<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token operator">*</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p3 <span class="token operator">-</span> obuf <span class="token operator">==</span> SIZE<span class="token punctuation">)</span><span class="token function">fwrite</span><span class="token punctuation">(</span>obuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p3 <span class="token operator">=</span> obuf<span class="token punctuation">;</span><span class="token operator">*</span>p3<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">pc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token function">pc</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token function">pc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>_Tp <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">|=</span> c <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> f <span class="token operator">?</span> x <span class="token operator">=</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> stk<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">pc</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>stk<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token function">pc</span><span class="token punctuation">(</span>stk<span class="token punctuation">[</span>tp<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">writesp</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pc</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">writeln</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>_Tp <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> Args <span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">read</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">write</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">writesp</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">writesp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">writesp</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">writeln</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">writeln</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">writeln</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>obuf<span class="token punctuation">,</span> p3 <span class="token operator">-</span> obuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Quick-Power-calculate-a-b-mod-p-in-O-log-n"><a href="#Quick-Power-calculate-a-b-mod-p-in-O-log-n" class="headerlink" title="Quick Power (calculate a^b mod p in O(log n) )"></a>Quick Power (calculate a^b mod p in O(log n) )</h2><p>$\color{white}{\text{什么？你问我为什么不用LaTeX？我也想知道为什么标题用不了LaTeX QAQ}}$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">quickpower</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token comment">// calculate $ a^b mod p $</span><span class="token punctuation">&#123;</span>a <span class="token operator">%=</span> p<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> base <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> ans <span class="token operator">*</span> base <span class="token operator">%</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>base <span class="token operator">=</span> base <span class="token operator">*</span> base <span class="token operator">%</span> p<span class="token punctuation">;</span>b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Balancing-Tree-in-Segtree"><a href="#Balancing-Tree-in-Segtree" class="headerlink" title="Balancing Tree in Segtree"></a>Balancing Tree in Segtree</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/extc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_cxx<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">target</span><span class="token punctuation">(</span></span><span class="token string">"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,lzcnt,abm,bmi,bmi2,fma,tune=native"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token comment">// #pragma GCC optimize(2)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token string">"\n"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">problemname</span> <span class="token string">"P3380"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">gc</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span>p1 <span class="token operator">=</span> ibuf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fread</span><span class="token punctuation">(</span>ibuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">EOF</span> <span class="token operator">:</span> <span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">namespace</span> FastIO<span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> SIZE <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">char</span> ibuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> obuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> ibuf<span class="token punctuation">,</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> ibuf<span class="token punctuation">,</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> obuf<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>s<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token operator">*</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span><span class="token function">isgraph</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p3 <span class="token operator">-</span> obuf <span class="token operator">==</span> SIZE<span class="token punctuation">)</span><span class="token function">fwrite</span><span class="token punctuation">(</span>obuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p3 <span class="token operator">=</span> obuf<span class="token punctuation">;</span><span class="token operator">*</span>p3<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">pc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token function">pc</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token function">pc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>_Tp <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">|=</span> c <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> f <span class="token operator">?</span> x <span class="token operator">=</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> stk<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">pc</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>stk<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token function">pc</span><span class="token punctuation">(</span>stk<span class="token punctuation">[</span>tp<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">writesp</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pc</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">writeln</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>_Tp <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> Args <span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">read</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">write</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">writesp</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">writesp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">writesp</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">writeln</span><span class="token punctuation">(</span>_Tp x<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">writeln</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">writeln</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>obuf<span class="token punctuation">,</span> p3 <span class="token operator">-</span> obuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">const</span> <span class="token expression"><span class="token keyword">constexpr</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> Main<span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> num <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Splay</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>node <span class="token operator">*</span>son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">*</span>father <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>val <span class="token operator">=</span> a<span class="token punctuation">,</span> cnt <span class="token operator">=</span> b<span class="token punctuation">,</span> size <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> node <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> node <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>val <span class="token operator">=</span> a<span class="token punctuation">,</span> cnt <span class="token operator">=</span> b<span class="token punctuation">,</span> size <span class="token operator">=</span> c<span class="token punctuation">;</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">maintain</span><span class="token punctuation">(</span>node <span class="token operator">*</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>u<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token punctuation">(</span>u<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> u<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>u<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> u<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> u<span class="token operator">-></span>cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>node <span class="token operator">*</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> u<span class="token operator">-></span>father <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token punctuation">(</span>u<span class="token operator">-></span>father<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>node <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> f1 <span class="token operator">=</span> x<span class="token operator">-></span>father<span class="token punctuation">,</span> f2 <span class="token operator">=</span> f1<span class="token operator">-></span>father<span class="token punctuation">;</span><span class="token keyword">auto</span> r1 <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">-></span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">-></span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>father <span class="token operator">=</span> f1<span class="token punctuation">;</span>f1<span class="token operator">-></span>son<span class="token punctuation">[</span>r1<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token operator">-></span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>f1<span class="token operator">-></span>son<span class="token punctuation">[</span>r1<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token operator">-></span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x<span class="token operator">-></span>son<span class="token punctuation">[</span>r1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">;</span>x<span class="token operator">-></span>father <span class="token operator">=</span> f2<span class="token punctuation">;</span>f1<span class="token operator">-></span>father <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f2<span class="token operator">-></span>son<span class="token punctuation">[</span>f1 <span class="token operator">==</span> f2<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">maintain</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maintain</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">splay</span><span class="token punctuation">(</span>node <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> father <span class="token operator">=</span> x<span class="token operator">-></span>father<span class="token punctuation">;</span> father <span class="token operator">=</span> x<span class="token operator">-></span>father<span class="token punctuation">,</span> father<span class="token punctuation">;</span> <span class="token function">rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>father<span class="token operator">-></span>father<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">check</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span> <span class="token operator">?</span> father <span class="token operator">:</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>root <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">++</span>cur<span class="token operator">-></span>cnt<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>father<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// auto father = cur->father;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">;</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token operator">++</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token operator">-></span>cnt<span class="token punctuation">;</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token operator">-></span>father <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>root <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">;</span>root<span class="token operator">-></span>cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>root<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>root<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">rk</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">></span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>now <span class="token operator">+=</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now <span class="token operator">+=</span> cur<span class="token operator">-></span>cnt<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>now <span class="token operator">+=</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">kth</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>k <span class="token operator">-=</span> cur<span class="token operator">-></span>cnt <span class="token operator">+</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cur <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>node <span class="token operator">*</span><span class="token function">pre</span><span class="token punctuation">(</span>node <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> x<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>node <span class="token operator">*</span><span class="token function">nxt</span><span class="token punctuation">(</span>node <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> x<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">rk</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">--</span>cur<span class="token operator">-></span>cnt<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>root<span class="token operator">-></span>father <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">auto</span> oldroot <span class="token operator">=</span> root<span class="token punctuation">;</span>node <span class="token operator">*</span>x1 <span class="token operator">=</span> <span class="token function">pre</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>father <span class="token operator">=</span> x1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x1<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> oldroot<span class="token punctuation">;</span><span class="token function">maintain</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Segtree</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> cl<span class="token punctuation">,</span> cr<span class="token punctuation">;</span>node <span class="token operator">*</span>son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">*</span>father <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>Splay <span class="token operator">*</span>tree<span class="token punctuation">;</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tree <span class="token operator">=</span> <span class="token keyword">new</span> Splay<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span>arr<span class="token punctuation">;</span>node <span class="token operator">*</span>root<span class="token punctuation">;</span><span class="token function">Segtree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Segtree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">build_tree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>node <span class="token operator">*</span><span class="token function">build_tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> cl<span class="token punctuation">,</span> <span class="token keyword">int</span> cr<span class="token punctuation">,</span> node <span class="token operator">*</span>fa<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">;</span>p<span class="token operator">-></span>father <span class="token operator">=</span> fa<span class="token punctuation">;</span>p<span class="token operator">-></span>cl <span class="token operator">=</span> cl<span class="token punctuation">,</span> p<span class="token operator">-></span>cr <span class="token operator">=</span> cr<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> arr<span class="token operator">-></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> cl<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token operator">-></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> cr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> cr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>cl <span class="token operator">+</span> cr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">build_tree</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">build_tree</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cr<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> node <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">del</span><span class="token punctuation">(</span>arr<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>cl <span class="token operator">==</span> p<span class="token operator">-></span>cr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">modify</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> val<span class="token punctuation">,</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token punctuation">(</span>p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>cr <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">modify</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">rnk</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> node <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> p<span class="token operator">-></span>cl <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>cr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// p->tree->insert(k);</span><span class="token keyword">int</span> res <span class="token operator">=</span> p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">rk</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// p->tree->del(k);</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>cr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> <span class="token function">rnk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>cl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> <span class="token function">rnk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">rnk</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">rnk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> node <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> p<span class="token operator">-></span>cl <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>cr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">pre</span><span class="token punctuation">(</span>p<span class="token operator">-></span>tree<span class="token operator">-></span>root<span class="token punctuation">)</span><span class="token operator">-></span>val<span class="token punctuation">;</span>p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">del</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">>=</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>cr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">pre</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">,</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>cl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">pre</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">,</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">pre</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">nxt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> node <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> p<span class="token operator">-></span>cl <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>cr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">nxt</span><span class="token punctuation">(</span>p<span class="token operator">-></span>tree<span class="token operator">-></span>root<span class="token punctuation">)</span><span class="token operator">-></span>val<span class="token punctuation">;</span>p<span class="token operator">-></span>tree<span class="token operator">-></span><span class="token function">del</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;=</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>cr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">nxt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">,</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>cl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">nxt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">,</span> p<span class="token operator">-></span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">nxt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">nxt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">kth</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> cl <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> cr <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cl <span class="token operator">&lt;</span> cr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>cl <span class="token operator">+</span> cr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rnk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cl <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cr <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> cl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> Tree<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Tree <span class="token operator">=</span> <span class="token function">Segtree</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> opt<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> x<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">writeln</span><span class="token punctuation">(</span>Tree<span class="token punctuation">.</span><span class="token function">rnk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">writeln</span><span class="token punctuation">(</span>Tree<span class="token punctuation">.</span><span class="token function">kth</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>Tree<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">writeln</span><span class="token punctuation">(</span>Tree<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">writeln</span><span class="token punctuation">(</span>Tree<span class="token punctuation">.</span><span class="token function">nxt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">FastIO</span><span class="token double-colon punctuation">::</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span><span class="token function">freopen</span><span class="token punctuation">(</span>problemname <span class="token string">"_8.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span>problemname <span class="token string">".out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Main</span><span class="token double-colon punctuation">::</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/27/hello-world/"/>
      <url>/2023/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
