<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红黑树模板 (Red-Black Tree)</title>
      <link href="/2023/10/30/Red-Black-Tree-Template/"/>
      <url>/2023/10/30/Red-Black-Tree-Template/</url>
      
        <content type="html"><![CDATA[<p>理论上来说根据 GPL v2 可以自由分发，所以在这里贴上作者应该就不是什么大问题了（确信）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-2.0-or-later</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Red Black Trees</span></span><br><span class="line"><span class="comment">  (C) 1999  Andrea Arcangeli &lt;andrea@suse.de&gt;</span></span><br><span class="line"><span class="comment">  (C) 2002  David Woodhouse &lt;dwmw2@infradead.org&gt;</span></span><br><span class="line"><span class="comment">  (C) 2012  Michel Lespinasse &lt;walken@google.com&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  linux/lib/rbtree.c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;linux/rbtree_augmented.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;linux/export.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * red-black trees properties:  https://en.wikipedia.org/wiki/Rbtree</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  1) A node is either red or black</span></span><br><span class="line"><span class="comment"> *  2) The root is black</span></span><br><span class="line"><span class="comment"> *  3) All leaves (NULL) are black</span></span><br><span class="line"><span class="comment"> *  4) Both children of every red node are black</span></span><br><span class="line"><span class="comment"> *  5) Every simple path from root to leaves contains the same number</span></span><br><span class="line"><span class="comment"> *     of black nodes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  4 and 5 give the O(log n) guarantee, since 4 implies you cannot have two</span></span><br><span class="line"><span class="comment"> *  consecutive red nodes in a path and every red node is therefore followed by</span></span><br><span class="line"><span class="comment"> *  a black. So if B is the number of black nodes on every simple path (as per</span></span><br><span class="line"><span class="comment"> *  5), then the longest possible path due to 4 is 2B.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  We shall indicate color with case, where black nodes are uppercase and red</span></span><br><span class="line"><span class="comment"> *  nodes will be lowercase. Unknown color nodes shall be drawn as red within</span></span><br><span class="line"><span class="comment"> *  parentheses and have some accompanying text comment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Notes on lockless lookups:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * All stores to the tree structure (rb_left and rb_right) must be done using</span></span><br><span class="line"><span class="comment"> * WRITE_ONCE(). And we must not inadvertently cause (temporary) loops in the</span></span><br><span class="line"><span class="comment"> * tree structure as seen in program order.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These two requirements will allow lockless iteration of the tree -- not</span></span><br><span class="line"><span class="comment"> * correct iteration mind you, tree rotations are not atomic so a lookup might</span></span><br><span class="line"><span class="comment"> * miss entire subtrees.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * But they do guarantee that any such traversal will only see valid elements</span></span><br><span class="line"><span class="comment"> * and that it will indeed complete -- does not get stuck in a loop.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * It also guarantees that if the lookup returns an element it is the &#x27;correct&#x27;</span></span><br><span class="line"><span class="comment"> * one. But not returning an element does _NOT_ mean it&#x27;s not present.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Stores to __rb_parent_color are not important for simple lookups so those</span></span><br><span class="line"><span class="comment"> * are left undone as of now. Nor did I check for loops involving parent</span></span><br><span class="line"><span class="comment"> * pointers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title">rb_set_black</span><span class="params">(<span class="keyword">struct</span> rb_node *rb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rb-&gt;__rb_parent_color += RB_BLACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> <span class="title class_">rb_node</span> *<span class="built_in">rb_red_parent</span>(<span class="keyword">struct</span> rb_node *red)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">struct</span> rb_node *)red-&gt;__rb_parent_color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Helper function for rotations:</span></span><br><span class="line"><span class="comment"> * - old&#x27;s parent and color get assigned to new</span></span><br><span class="line"><span class="comment"> * - old gets assigned new as a parent and &#x27;color&#x27; as a color.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span></span><br><span class="line">__rb_rotate_set_parents(<span class="keyword">struct</span> rb_node *old, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>,</span><br><span class="line"><span class="keyword">struct</span> rb_root *root, <span class="type">int</span> color)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *parent = <span class="built_in">rb_parent</span>(old);</span><br><span class="line"><span class="keyword">new</span>-&gt;__rb_parent_color = old-&gt;__rb_parent_color;</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(old, <span class="keyword">new</span>, color);</span><br><span class="line">__rb_change_child(old, <span class="keyword">new</span>, parent, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line">__rb_insert(<span class="keyword">struct</span> rb_node *node, <span class="keyword">struct</span> rb_root *root,</span><br><span class="line">    <span class="built_in">void</span> (*augment_rotate)(<span class="keyword">struct</span> rb_node *old, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *parent = <span class="built_in">rb_red_parent</span>(node), *gparent, *tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Loop invariant: node is red.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">unlikely</span>(!parent)) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The inserted node is root. Either this is the</span></span><br><span class="line"><span class="comment"> * first node, or we recursed at Case 1 below and</span></span><br><span class="line"><span class="comment"> * are no longer violating 4).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(node, <span class="literal">NULL</span>, RB_BLACK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If there is a black parent, we are done.</span></span><br><span class="line"><span class="comment"> * Otherwise, take some corrective action as,</span></span><br><span class="line"><span class="comment"> * per 4), we don&#x27;t want a red root or two</span></span><br><span class="line"><span class="comment"> * consecutive red nodes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">rb_is_black</span>(parent))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">gparent = <span class="built_in">rb_red_parent</span>(parent);</span><br><span class="line"></span><br><span class="line">tmp = gparent-&gt;rb_right;</span><br><span class="line"><span class="keyword">if</span> (parent != tmp) &#123;<span class="comment">/* parent == gparent-&gt;rb_left */</span></span><br><span class="line"><span class="keyword">if</span> (tmp &amp;&amp; <span class="built_in">rb_is_red</span>(tmp)) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Case 1 - node&#x27;s uncle is red (color flips).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       G            g</span></span><br><span class="line"><span class="comment"> *      / \          / \</span></span><br><span class="line"><span class="comment"> *     p   u  --&gt;   P   U</span></span><br><span class="line"><span class="comment"> *    /            /</span></span><br><span class="line"><span class="comment"> *   n            n</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * However, since g&#x27;s parent might be red, and</span></span><br><span class="line"><span class="comment"> * 4) does not allow this, we need to recurse</span></span><br><span class="line"><span class="comment"> * at g.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp, gparent, RB_BLACK);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(parent, gparent, RB_BLACK);</span><br><span class="line">node = gparent;</span><br><span class="line">parent = <span class="built_in">rb_parent</span>(node);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(node, parent, RB_RED);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmp = parent-&gt;rb_right;</span><br><span class="line"><span class="keyword">if</span> (node == tmp) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Case 2 - node&#x27;s uncle is black and node is</span></span><br><span class="line"><span class="comment"> * the parent&#x27;s right child (left rotate at parent).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      G             G</span></span><br><span class="line"><span class="comment"> *     / \           / \</span></span><br><span class="line"><span class="comment"> *    p   U  --&gt;    n   U</span></span><br><span class="line"><span class="comment"> *     \           /</span></span><br><span class="line"><span class="comment"> *      n         p</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This still leaves us in violation of 4), the</span></span><br><span class="line"><span class="comment"> * continuation into Case 3 will fix that.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tmp = node-&gt;rb_left;</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_right, tmp);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(node-&gt;rb_left, parent);</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp, parent,</span><br><span class="line">    RB_BLACK);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(parent, node, RB_RED);</span><br><span class="line"><span class="built_in">augment_rotate</span>(parent, node);</span><br><span class="line">parent = node;</span><br><span class="line">tmp = node-&gt;rb_right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Case 3 - node&#x27;s uncle is black and node is</span></span><br><span class="line"><span class="comment"> * the parent&#x27;s left child (right rotate at gparent).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        G           P</span></span><br><span class="line"><span class="comment"> *       / \         / \</span></span><br><span class="line"><span class="comment"> *      p   U  --&gt;  n   g</span></span><br><span class="line"><span class="comment"> *     /                 \</span></span><br><span class="line"><span class="comment"> *    n                   U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(gparent-&gt;rb_left, tmp); <span class="comment">/* == parent-&gt;rb_right */</span></span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_right, gparent);</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp, gparent, RB_BLACK);</span><br><span class="line">__rb_rotate_set_parents(gparent, parent, root, RB_RED);</span><br><span class="line"><span class="built_in">augment_rotate</span>(gparent, parent);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmp = gparent-&gt;rb_left;</span><br><span class="line"><span class="keyword">if</span> (tmp &amp;&amp; <span class="built_in">rb_is_red</span>(tmp)) &#123;</span><br><span class="line"><span class="comment">/* Case 1 - color flips */</span></span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp, gparent, RB_BLACK);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(parent, gparent, RB_BLACK);</span><br><span class="line">node = gparent;</span><br><span class="line">parent = <span class="built_in">rb_parent</span>(node);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(node, parent, RB_RED);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmp = parent-&gt;rb_left;</span><br><span class="line"><span class="keyword">if</span> (node == tmp) &#123;</span><br><span class="line"><span class="comment">/* Case 2 - right rotate at parent */</span></span><br><span class="line">tmp = node-&gt;rb_right;</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_left, tmp);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(node-&gt;rb_right, parent);</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp, parent,</span><br><span class="line">    RB_BLACK);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(parent, node, RB_RED);</span><br><span class="line"><span class="built_in">augment_rotate</span>(parent, node);</span><br><span class="line">parent = node;</span><br><span class="line">tmp = node-&gt;rb_left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Case 3 - left rotate at gparent */</span></span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(gparent-&gt;rb_right, tmp); <span class="comment">/* == parent-&gt;rb_left */</span></span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_left, gparent);</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp, gparent, RB_BLACK);</span><br><span class="line">__rb_rotate_set_parents(gparent, parent, root, RB_RED);</span><br><span class="line"><span class="built_in">augment_rotate</span>(gparent, parent);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Inline version for rb_erase() use - we want to be able to inline</span></span><br><span class="line"><span class="comment"> * and eliminate the dummy_rotate callback there</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line">____rb_erase_color(<span class="keyword">struct</span> rb_node *parent, <span class="keyword">struct</span> rb_root *root,</span><br><span class="line"><span class="built_in">void</span> (*augment_rotate)(<span class="keyword">struct</span> rb_node *old, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *node = <span class="literal">NULL</span>, *sibling, *tmp1, *tmp2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Loop invariants:</span></span><br><span class="line"><span class="comment"> * - node is black (or NULL on first iteration)</span></span><br><span class="line"><span class="comment"> * - node is not the root (parent is not NULL)</span></span><br><span class="line"><span class="comment"> * - All leaf paths going through parent and node have a</span></span><br><span class="line"><span class="comment"> *   black node count that is 1 lower than other leaf paths.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sibling = parent-&gt;rb_right;</span><br><span class="line"><span class="keyword">if</span> (node != sibling) &#123;<span class="comment">/* node == parent-&gt;rb_left */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rb_is_red</span>(sibling)) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Case 1 - left rotate at parent</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     P               S</span></span><br><span class="line"><span class="comment"> *    / \             / \</span></span><br><span class="line"><span class="comment"> *   N   s    --&gt;    p   Sr</span></span><br><span class="line"><span class="comment"> *      / \         / \</span></span><br><span class="line"><span class="comment"> *     Sl  Sr      N   Sl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tmp1 = sibling-&gt;rb_left;</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_right, tmp1);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(sibling-&gt;rb_left, parent);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp1, parent, RB_BLACK);</span><br><span class="line">__rb_rotate_set_parents(parent, sibling, root,</span><br><span class="line">RB_RED);</span><br><span class="line"><span class="built_in">augment_rotate</span>(parent, sibling);</span><br><span class="line">sibling = tmp1;</span><br><span class="line">&#125;</span><br><span class="line">tmp1 = sibling-&gt;rb_right;</span><br><span class="line"><span class="keyword">if</span> (!tmp1 || <span class="built_in">rb_is_black</span>(tmp1)) &#123;</span><br><span class="line">tmp2 = sibling-&gt;rb_left;</span><br><span class="line"><span class="keyword">if</span> (!tmp2 || <span class="built_in">rb_is_black</span>(tmp2)) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Case 2 - sibling color flip</span></span><br><span class="line"><span class="comment"> * (p could be either color here)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    (p)           (p)</span></span><br><span class="line"><span class="comment"> *    / \           / \</span></span><br><span class="line"><span class="comment"> *   N   S    --&gt;  N   s</span></span><br><span class="line"><span class="comment"> *      / \           / \</span></span><br><span class="line"><span class="comment"> *     Sl  Sr        Sl  Sr</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This leaves us violating 5) which</span></span><br><span class="line"><span class="comment"> * can be fixed by flipping p to black</span></span><br><span class="line"><span class="comment"> * if it was red, or by recursing at p.</span></span><br><span class="line"><span class="comment"> * p is red when coming from Case 1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(sibling, parent,</span><br><span class="line">    RB_RED);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rb_is_red</span>(parent))</span><br><span class="line"><span class="built_in">rb_set_black</span>(parent);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">node = parent;</span><br><span class="line">parent = <span class="built_in">rb_parent</span>(node);</span><br><span class="line"><span class="keyword">if</span> (parent)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Case 3 - right rotate at sibling</span></span><br><span class="line"><span class="comment"> * (p could be either color here)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   (p)           (p)</span></span><br><span class="line"><span class="comment"> *   / \           / \</span></span><br><span class="line"><span class="comment"> *  N   S    --&gt;  N   sl</span></span><br><span class="line"><span class="comment"> *     / \             \</span></span><br><span class="line"><span class="comment"> *    sl  Sr            S</span></span><br><span class="line"><span class="comment"> *                       \</span></span><br><span class="line"><span class="comment"> *                        Sr</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note: p might be red, and then both</span></span><br><span class="line"><span class="comment"> * p and sl are red after rotation(which</span></span><br><span class="line"><span class="comment"> * breaks property 4). This is fixed in</span></span><br><span class="line"><span class="comment"> * Case 4 (in __rb_rotate_set_parents()</span></span><br><span class="line"><span class="comment"> *         which set sl the color of p</span></span><br><span class="line"><span class="comment"> *         and set p RB_BLACK)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   (p)            (sl)</span></span><br><span class="line"><span class="comment"> *   / \            /  \</span></span><br><span class="line"><span class="comment"> *  N   sl   --&gt;   P    S</span></span><br><span class="line"><span class="comment"> *       \        /      \</span></span><br><span class="line"><span class="comment"> *        S      N        Sr</span></span><br><span class="line"><span class="comment"> *         \</span></span><br><span class="line"><span class="comment"> *          Sr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tmp1 = tmp2-&gt;rb_right;</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(sibling-&gt;rb_left, tmp1);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(tmp2-&gt;rb_right, sibling);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_right, tmp2);</span><br><span class="line"><span class="keyword">if</span> (tmp1)</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp1, sibling,</span><br><span class="line">    RB_BLACK);</span><br><span class="line"><span class="built_in">augment_rotate</span>(sibling, tmp2);</span><br><span class="line">tmp1 = sibling;</span><br><span class="line">sibling = tmp2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Case 4 - left rotate at parent + color flips</span></span><br><span class="line"><span class="comment"> * (p and sl could be either color here.</span></span><br><span class="line"><span class="comment"> *  After rotation, p becomes black, s acquires</span></span><br><span class="line"><span class="comment"> *  p&#x27;s color, and sl keeps its color)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      (p)             (s)</span></span><br><span class="line"><span class="comment"> *      / \             / \</span></span><br><span class="line"><span class="comment"> *     N   S     --&gt;   P   Sr</span></span><br><span class="line"><span class="comment"> *        / \         / \</span></span><br><span class="line"><span class="comment"> *      (sl) sr      N  (sl)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tmp2 = sibling-&gt;rb_left;</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_right, tmp2);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(sibling-&gt;rb_left, parent);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp1, sibling, RB_BLACK);</span><br><span class="line"><span class="keyword">if</span> (tmp2)</span><br><span class="line"><span class="built_in">rb_set_parent</span>(tmp2, parent);</span><br><span class="line">__rb_rotate_set_parents(parent, sibling, root,</span><br><span class="line">RB_BLACK);</span><br><span class="line"><span class="built_in">augment_rotate</span>(parent, sibling);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sibling = parent-&gt;rb_left;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rb_is_red</span>(sibling)) &#123;</span><br><span class="line"><span class="comment">/* Case 1 - right rotate at parent */</span></span><br><span class="line">tmp1 = sibling-&gt;rb_right;</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_left, tmp1);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(sibling-&gt;rb_right, parent);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp1, parent, RB_BLACK);</span><br><span class="line">__rb_rotate_set_parents(parent, sibling, root,</span><br><span class="line">RB_RED);</span><br><span class="line"><span class="built_in">augment_rotate</span>(parent, sibling);</span><br><span class="line">sibling = tmp1;</span><br><span class="line">&#125;</span><br><span class="line">tmp1 = sibling-&gt;rb_left;</span><br><span class="line"><span class="keyword">if</span> (!tmp1 || <span class="built_in">rb_is_black</span>(tmp1)) &#123;</span><br><span class="line">tmp2 = sibling-&gt;rb_right;</span><br><span class="line"><span class="keyword">if</span> (!tmp2 || <span class="built_in">rb_is_black</span>(tmp2)) &#123;</span><br><span class="line"><span class="comment">/* Case 2 - sibling color flip */</span></span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(sibling, parent,</span><br><span class="line">    RB_RED);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rb_is_red</span>(parent))</span><br><span class="line"><span class="built_in">rb_set_black</span>(parent);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">node = parent;</span><br><span class="line">parent = <span class="built_in">rb_parent</span>(node);</span><br><span class="line"><span class="keyword">if</span> (parent)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Case 3 - left rotate at sibling */</span></span><br><span class="line">tmp1 = tmp2-&gt;rb_left;</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(sibling-&gt;rb_right, tmp1);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(tmp2-&gt;rb_left, sibling);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_left, tmp2);</span><br><span class="line"><span class="keyword">if</span> (tmp1)</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp1, sibling,</span><br><span class="line">    RB_BLACK);</span><br><span class="line"><span class="built_in">augment_rotate</span>(sibling, tmp2);</span><br><span class="line">tmp1 = sibling;</span><br><span class="line">sibling = tmp2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Case 4 - right rotate at parent + color flips */</span></span><br><span class="line">tmp2 = sibling-&gt;rb_right;</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(parent-&gt;rb_left, tmp2);</span><br><span class="line"><span class="built_in">WRITE_ONCE</span>(sibling-&gt;rb_right, parent);</span><br><span class="line"><span class="built_in">rb_set_parent_color</span>(tmp1, sibling, RB_BLACK);</span><br><span class="line"><span class="keyword">if</span> (tmp2)</span><br><span class="line"><span class="built_in">rb_set_parent</span>(tmp2, parent);</span><br><span class="line">__rb_rotate_set_parents(parent, sibling, root,</span><br><span class="line">RB_BLACK);</span><br><span class="line"><span class="built_in">augment_rotate</span>(parent, sibling);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Non-inline version for rb_erase_augmented() use */</span></span><br><span class="line"><span class="type">void</span> __rb_erase_color(<span class="keyword">struct</span> rb_node *parent, <span class="keyword">struct</span> rb_root *root,</span><br><span class="line"><span class="built_in">void</span> (*augment_rotate)(<span class="keyword">struct</span> rb_node *old, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>))</span><br><span class="line">&#123;</span><br><span class="line">____rb_erase_color(parent, root, augment_rotate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(__rb_erase_color);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Non-augmented rbtree manipulation functions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * We use dummy augmented callbacks here, and have the compiler optimize them</span></span><br><span class="line"><span class="comment"> * out of the rb_insert_color() and rb_erase() function definitions.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title">dummy_propagate</span><span class="params">(<span class="keyword">struct</span> rb_node *node, <span class="keyword">struct</span> rb_node *stop)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title">dummy_copy</span><span class="params">(<span class="keyword">struct</span> rb_node *old, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title">dummy_rotate</span><span class="params">(<span class="keyword">struct</span> rb_node *old, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">rb_augment_callbacks</span> dummy_callbacks = &#123;</span><br><span class="line">.propagate = dummy_propagate,</span><br><span class="line">.copy = dummy_copy,</span><br><span class="line">.rotate = dummy_rotate</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rb_insert_color</span><span class="params">(<span class="keyword">struct</span> rb_node *node, <span class="keyword">struct</span> rb_root *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__rb_insert(node, root, dummy_rotate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_insert_color);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rb_erase</span><span class="params">(<span class="keyword">struct</span> rb_node *node, <span class="keyword">struct</span> rb_root *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *rebalance;</span><br><span class="line">rebalance = __rb_erase_augmented(node, root, &amp;dummy_callbacks);</span><br><span class="line"><span class="keyword">if</span> (rebalance)</span><br><span class="line">____rb_erase_color(rebalance, root, dummy_rotate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_erase);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Augmented rbtree manipulation functions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This instantiates the same __always_inline functions as in the non-augmented</span></span><br><span class="line"><span class="comment"> * case, but this time with user-defined callbacks.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __rb_insert_augmented(<span class="keyword">struct</span> rb_node *node, <span class="keyword">struct</span> rb_root *root,</span><br><span class="line"><span class="built_in">void</span> (*augment_rotate)(<span class="keyword">struct</span> rb_node *old, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>))</span><br><span class="line">&#123;</span><br><span class="line">__rb_insert(node, root, augment_rotate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(__rb_insert_augmented);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This function returns the first node (in sort order) of the tree.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *<span class="built_in">rb_first</span>(<span class="type">const</span> <span class="keyword">struct</span> rb_root *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span>*n;</span><br><span class="line"></span><br><span class="line">n = root-&gt;rb_node;</span><br><span class="line"><span class="keyword">if</span> (!n)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (n-&gt;rb_left)</span><br><span class="line">n = n-&gt;rb_left;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_first);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *<span class="built_in">rb_last</span>(<span class="type">const</span> <span class="keyword">struct</span> rb_root *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span>*n;</span><br><span class="line"></span><br><span class="line">n = root-&gt;rb_node;</span><br><span class="line"><span class="keyword">if</span> (!n)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (n-&gt;rb_right)</span><br><span class="line">n = n-&gt;rb_right;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_last);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *<span class="built_in">rb_next</span>(<span class="type">const</span> <span class="keyword">struct</span> rb_node *node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">RB_EMPTY_NODE</span>(node))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we have a right-hand child, go down and then left as far</span></span><br><span class="line"><span class="comment"> * as we can.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;rb_right) &#123;</span><br><span class="line">node = node-&gt;rb_right;</span><br><span class="line"><span class="keyword">while</span> (node-&gt;rb_left)</span><br><span class="line">node = node-&gt;rb_left;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">struct</span> rb_node *)node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * No right-hand children. Everything down and left is smaller than us,</span></span><br><span class="line"><span class="comment"> * so any &#x27;next&#x27; node must be in the general direction of our parent.</span></span><br><span class="line"><span class="comment"> * Go up the tree; any time the ancestor is a right-hand child of its</span></span><br><span class="line"><span class="comment"> * parent, keep going up. First time it&#x27;s a left-hand child of its</span></span><br><span class="line"><span class="comment"> * parent, said parent is our &#x27;next&#x27; node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">while</span> ((parent = <span class="built_in">rb_parent</span>(node)) &amp;&amp; node == parent-&gt;rb_right)</span><br><span class="line">node = parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_next);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *<span class="built_in">rb_prev</span>(<span class="type">const</span> <span class="keyword">struct</span> rb_node *node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">RB_EMPTY_NODE</span>(node))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we have a left-hand child, go down and then right as far</span></span><br><span class="line"><span class="comment"> * as we can.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;rb_left) &#123;</span><br><span class="line">node = node-&gt;rb_left;</span><br><span class="line"><span class="keyword">while</span> (node-&gt;rb_right)</span><br><span class="line">node = node-&gt;rb_right;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">struct</span> rb_node *)node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * No left-hand children. Go up till we find an ancestor which</span></span><br><span class="line"><span class="comment"> * is a right-hand child of its parent.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">while</span> ((parent = <span class="built_in">rb_parent</span>(node)) &amp;&amp; node == parent-&gt;rb_left)</span><br><span class="line">node = parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_prev);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rb_replace_node</span><span class="params">(<span class="keyword">struct</span> rb_node *victim, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">     <span class="keyword">struct</span> rb_root *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *parent = <span class="built_in">rb_parent</span>(victim);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Copy the pointers/colour from the victim to the replacement */</span></span><br><span class="line">*<span class="keyword">new</span> = *victim;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the surrounding nodes to point to the replacement */</span></span><br><span class="line"><span class="keyword">if</span> (victim-&gt;rb_left)</span><br><span class="line"><span class="built_in">rb_set_parent</span>(victim-&gt;rb_left, <span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (victim-&gt;rb_right)</span><br><span class="line"><span class="built_in">rb_set_parent</span>(victim-&gt;rb_right, <span class="keyword">new</span>);</span><br><span class="line">__rb_change_child(victim, <span class="keyword">new</span>, parent, root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_replace_node);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rb_replace_node_rcu</span><span class="params">(<span class="keyword">struct</span> rb_node *victim, <span class="keyword">struct</span> rb_node *<span class="keyword">new</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">struct</span> rb_root *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *parent = <span class="built_in">rb_parent</span>(victim);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Copy the pointers/colour from the victim to the replacement */</span></span><br><span class="line">*<span class="keyword">new</span> = *victim;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the surrounding nodes to point to the replacement */</span></span><br><span class="line"><span class="keyword">if</span> (victim-&gt;rb_left)</span><br><span class="line"><span class="built_in">rb_set_parent</span>(victim-&gt;rb_left, <span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (victim-&gt;rb_right)</span><br><span class="line"><span class="built_in">rb_set_parent</span>(victim-&gt;rb_right, <span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the parent&#x27;s pointer to the new node last after an RCU barrier</span></span><br><span class="line"><span class="comment"> * so that the pointers onwards are seen to be set correctly when doing</span></span><br><span class="line"><span class="comment"> * an RCU walk over the tree.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__rb_change_child_rcu(victim, <span class="keyword">new</span>, parent, root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_replace_node_rcu);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> <span class="title class_">rb_node</span> *<span class="built_in">rb_left_deepest_node</span>(<span class="type">const</span> <span class="keyword">struct</span> rb_node *node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;rb_left)</span><br><span class="line">node = node-&gt;rb_left;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;rb_right)</span><br><span class="line">node = node-&gt;rb_right;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">return</span> (<span class="keyword">struct</span> rb_node *)node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *<span class="built_in">rb_next_postorder</span>(<span class="type">const</span> <span class="keyword">struct</span> rb_node *node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">rb_node</span> *parent;</span><br><span class="line"><span class="keyword">if</span> (!node)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">parent = <span class="built_in">rb_parent</span>(node);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we&#x27;re sitting on node, we&#x27;ve already seen our children */</span></span><br><span class="line"><span class="keyword">if</span> (parent &amp;&amp; node == parent-&gt;rb_left &amp;&amp; parent-&gt;rb_right) &#123;</span><br><span class="line"><span class="comment">/* If we are the parent&#x27;s left node, go to the parent&#x27;s right</span></span><br><span class="line"><span class="comment"> * node then all the way down to the left */</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">rb_left_deepest_node</span>(parent-&gt;rb_right);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="comment">/* Otherwise we are the parent&#x27;s right node, and the parent</span></span><br><span class="line"><span class="comment"> * should be next */</span></span><br><span class="line"><span class="built_in">return</span> (<span class="keyword">struct</span> rb_node *)parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_next_postorder);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rb_node</span> *<span class="built_in">rb_first_postorder</span>(<span class="type">const</span> <span class="keyword">struct</span> rb_root *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!root-&gt;rb_node)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">rb_left_deepest_node</span>(root-&gt;rb_node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EXPORT_SYMBOL</span>(rb_first_postorder);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cambridge dictionary 单词查询程序</title>
      <link href="/2023/10/29/Cambridge-dictionary-query-program/"/>
      <url>/2023/10/29/Cambridge-dictionary-query-program/</url>
      
        <content type="html"><![CDATA[<p>程序会自动从 <code>word.in</code> 中获取信息并输出结果，输入格式如下：</p><p>第一行 $ n $ 为书本数量，以下有 $ n $ 组数据，每组的第一行为书本名称，第二行为页数 $ m $ ，下有 $ m $ 组数据，每组的第 $ 1~3 $ 行 分别为页码、标题和单词数量 $ k $ ，下有 $ k $ 个单词。</p><p>程序会自动输出 test.tex 。</p><p>请确保你安装了 requests、bs4、lxml模块。</p><p>请将以下两个文件放到同一个目录下运行。</p><p>main.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests, os, sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> write <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from tqdm import tqdm</span></span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.retry <span class="keyword">import</span> Retry</span><br><span class="line"></span><br><span class="line">os.chdir(os.getcwd() + <span class="string">&quot;/Something else/20231019/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">head = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">\\documentclass[a4paper,margin=1.0cm,10.5pt]&#123;book&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\usepackage[UTF8]&#123;ctex&#125;</span></span><br><span class="line"><span class="string">\\usepackage&#123;tipa&#125;</span></span><br><span class="line"><span class="string">\\usepackage&#123;color&#125;</span></span><br><span class="line"><span class="string">\\usepackage&#123;geometry&#125;</span></span><br><span class="line"><span class="string">\\usepackage&#123;fontspec&#125;</span></span><br><span class="line"><span class="string">\\usepackage&#123;xcolor&#125;</span></span><br><span class="line"><span class="string">\\usepackage&#123;titlesec&#125;</span></span><br><span class="line"><span class="string">\\defaultfontfeatures&#123;Ligatures=TeX&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\setmainfont&#123;Times New Roman&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\renewcommand&#123;\\large&#125;&#123;\\fontsize&#123;14pt&#125;&#123;\\baselineskip&#125;\\selectfont&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\definecolor&#123;Purple&#125;&#123;rgb&#125;&#123;.256,.0,.511&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\newfontfamily\\sectionfont[Color=Purple]&#123;Times New Roman&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\titleformat*&#123;\\section&#125;&#123;\\large\\bfseries\\sffamily\\color&#123;Purple&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\begin&#123;document&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\title&#123;Vocabulary&#125;</span></span><br><span class="line"><span class="string">\\maketitle</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\\pagenumbering&#123;roman&#125;</span></span><br><span class="line"><span class="string">\\tableofcontents</span></span><br><span class="line"><span class="string">\\newpage</span></span><br><span class="line"><span class="string">\\pagenumbering&#123;arabic&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tail = <span class="string">&quot;&quot;&quot;\\end&#123;document&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;XSRF-TOKEN=091b0a7e-7b7c-440f-82ba-7853a686d0e8; preferredDictionaries=&quot;english-chinese-simplified,english-chinese-traditional,english,british-grammar&quot;; _ga=GA1.3.1985437458.1697684466; _gid=GA1.3.1397756659.1697684466; amp-access=amp-DgWec-PNndO292HPfqJugg; _hjFirstSeen=1; _hjSession_2790984=eyJpZCI6Ijc4ZmUwMGE3LTM0MjQtNGNhNi1hMjYwLTE3Yjc3YmQxMTE0MSIsImNyZWF0ZWQiOjE2OTc2ODQ0Njc0NTcsImluU2FtcGxlIjpmYWxzZSwic2Vzc2lvbml6ZXJCZXRhRW5hYmxlZCI6dHJ1ZX0=; _sp_ses.7ecc=*; OptanonConsent=isGpcEnabled=0&amp;datestamp=Thu+Oct+19+2023+11%3A01%3A20+GMT%2B0800+(China+Standard+Time)&amp;version=202308.1.0&amp;browserGpcFlag=0&amp;isIABGlobal=false&amp;hosts=&amp;landingPath=NotLandingPage&amp;groups=C0001%3A1%2CC0002%3A1%2CC0003%3A1%2CC0004%3A0&amp;AwaitingReconsent=false; _sp_id.7ecc=3979def0-c2d7-4674-82ae-82dabd30e180.1697684468.1.1697684480..0b270403-3325-4540-80fe-b9939b45295d....0; _hjSessionUser_2790984=eyJpZCI6IjllMjU2Zjk3LTU5ZjAtNWNhYi1hYzI4LWUyZDlhYmIzOGY4ZiIsImNyZWF0ZWQiOjE2OTc2ODQ0Njc0NTcsImV4aXN0aW5nIjp0cnVlfQ==; _gat=1; iawsc1m=1; _sharedID=54582c27-481b-45f6-af8b-567598974fc2; _sharedID_cst=zix7LPQsHA%3D%3D; _pbjs_userid_consent_data=3524755945110770; _sharedid=0362b518-b56a-4a08-9f01-687b29d9e710; _lr_retry_request=true; _lr_env_src_ats=false; pbjs-unifiedid=%7B%22TDID%22%3A%22b82f813d-b87d-406b-920c-4d28ffdd6e63%22%2C%22TDID_LOOKUP%22%3A%22TRUE%22%2C%22TDID_CREATED_AT%22%3A%222023-09-19T03%3A10%3A42%22%7D; pbjs-unifiedid_cst=zix7LPQsHA%3D%3D; loginPopup=5; _ga_L9GCR21SZ7=GS1.3.1697684466.1.1.1697685069.27.0.0; iawpvccs=4; iawpvc=4; iawpvtc1m=4; cto_bundle=-fkA8F9VeGgzOEh2TlVBQyUyQnowREg4QkhxZlY5USUyQnRrdSUyQmQ3ZHFlSTRJJTJCTmppNmt1WCUyRlFxQWhKSlNKN1d6T0NwU3Z1RUx6WmUxSmxqOWd4RHROekZuclFJZCUyRjZQYnNyTjVoSmRpUzBpSyUyQmdGWnI3bHFVZFZ4Q3YzU1hxd0JQZmMlMkJFV0NUZjAlMkZuQm96NU9BNU14M2RVSkxaS0ElM0QlM0Q; cto_bidid=PEgR8V9vZWpoUjBET21nT0lHSUhkZUMySG1WZUhYMDJFbGxmUUR5cFJxUTZhejNRY3lmNWFDZlJrRjlJTDRoMnNxQTFlaTJKd3U3Z3BWdmx0S3FBNXZVZU8xMEZmbUQwVUZKRXpRdFNqSFZYZ3RQdyUzRA&#x27;</span>,</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46&quot;</span>,</span><br><span class="line"><span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;test.tex&quot;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line"></span><br><span class="line">stdin = <span class="built_in">open</span>(<span class="string">&quot;word.in&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line">file.write(head)</span><br><span class="line"></span><br><span class="line"><span class="comment"># book = input(&quot;请输入书本:&quot;)</span></span><br><span class="line"></span><br><span class="line">cntbook = <span class="built_in">int</span>(stdin.readline())</span><br><span class="line"></span><br><span class="line">lock=threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">word</span>):</span><br><span class="line"><span class="comment"># templine.set_description(&quot;Processing &quot;+nowpage)</span></span><br><span class="line">word = word.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;-&quot;</span>)</span><br><span class="line">word = word.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;-&quot;</span>)</span><br><span class="line">session = requests.Session()</span><br><span class="line">retry = Retry(total=<span class="number">114514</span>, backoff_factor=<span class="number">5</span>)</span><br><span class="line">adapter = HTTPAdapter(max_retries=retry)</span><br><span class="line">session.mount(<span class="string">&#x27;http://&#x27;</span>, adapter)</span><br><span class="line">session.mount(<span class="string">&#x27;https://&#x27;</span>, adapter)</span><br><span class="line">response = session.get(</span><br><span class="line"><span class="string">&quot;https://dictionary.cambridge.org/dictionary/english-chinese-simplified/&quot;</span></span><br><span class="line">+ word,</span><br><span class="line">headers=header,</span><br><span class="line">)</span><br><span class="line">contentori = BeautifulSoup(response.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">word = contentori.find_all(<span class="string">&quot;span&quot;</span>,class_=<span class="string">&quot;hw dhw&quot;</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error occured on word &quot;</span>+word+<span class="string">&quot;, please check the code or spelling.&quot;</span>)</span><br><span class="line"><span class="comment"># tempfile = open(&quot;test.out&quot;,&quot;r&quot;)</span></span><br><span class="line"><span class="comment"># temptext = tempfile.read()</span></span><br><span class="line"><span class="comment"># tempfile.close()</span></span><br><span class="line"><span class="comment"># content = BeautifulSoup(temptext ,&quot;lxml&quot;)</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">for</span> content1 <span class="keyword">in</span> contentori.find_all(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pr entry-body__el&quot;</span>):</span><br><span class="line">temp = content1.find_all(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pr dsense&quot;</span>)</span><br><span class="line">pronoun=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">pronoun = content1.find_all(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;pron dpron&quot;</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">part_of_speech = content1.find_all(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;pos dsense_pos&quot;</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">part_of_speech = content1.find_all(<span class="string">&quot;span&quot;</span>,class_=<span class="string">&quot;pos dpos&quot;</span>)[<span class="number">0</span>].text</span><br><span class="line">attri=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">attri = content1.find_all(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;dgram&quot;</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">temp2 = content1.find_all(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;def-block ddef_block&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> temp2:</span><br><span class="line">chinese = content.find_all(</span><br><span class="line"><span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;trans dtrans dtrans-se break-cj&quot;</span></span><br><span class="line">)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">attri = content.find_all(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;dgram&quot;</span>)[<span class="number">0</span>].text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">describe = content.find_all(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;guideword dsense_gw&quot;</span>)</span><br><span class="line">example_ENG = content.find_all(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;eg deg&quot;</span>)</span><br><span class="line">example_CHI = content.find_all(</span><br><span class="line"><span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;trans dtrans dtrans-se hdb break-cj&quot;</span></span><br><span class="line">)</span><br><span class="line">sentence = content.find_all(<span class="string">&quot;li&quot;</span>, class_=<span class="string">&quot;eg dexamp hax&quot;</span>)</span><br><span class="line">write(</span><br><span class="line">file,</span><br><span class="line">word,</span><br><span class="line">pronoun,</span><br><span class="line">chinese,</span><br><span class="line">part_of_speech,</span><br><span class="line">attri,</span><br><span class="line">example_CHI,</span><br><span class="line">example_ENG,</span><br><span class="line">sentence,</span><br><span class="line">)</span><br><span class="line">lock.release()</span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment"># # content = temp[0]</span></span><br><span class="line"><span class="comment"># chinese = contentori.find_all(</span></span><br><span class="line"><span class="comment"># &quot;span&quot;, class_=&quot;trans dtrans dtrans-se break-cj&quot;</span></span><br><span class="line"><span class="comment"># )[0].text</span></span><br><span class="line"><span class="comment"># part_of_speech = &quot;&quot;</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment"># part_of_speech = contentori.find_all(&quot;span&quot;, class_=&quot;pos dpos&quot;)[0].text</span></span><br><span class="line"><span class="comment"># except IndexError:</span></span><br><span class="line"><span class="comment"># part_of_speech = contentori.find_all(&quot;span&quot;, class_=&quot;pos dsense_pos&quot;)[</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># ].text</span></span><br><span class="line"><span class="comment"># attri = &quot;&quot;</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment"># attri = contentori.find_all(&quot;span&quot;, class_=&quot;dgram&quot;)[0].text</span></span><br><span class="line"><span class="comment"># except:</span></span><br><span class="line"><span class="comment"># pass</span></span><br><span class="line"><span class="comment"># describe = contentori.find_all(&quot;span&quot;, class_=&quot;guideword dsense_gw&quot;)</span></span><br><span class="line"><span class="comment"># example_ENG = contentori.find_all(&quot;span&quot;, class_=&quot;eg deg&quot;)</span></span><br><span class="line"><span class="comment"># example_CHI = contentori.find_all(</span></span><br><span class="line"><span class="comment"># &quot;span&quot;, class_=&quot;trans dtrans dtrans-se hdb break-cj&quot;</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="comment"># sentence = contentori.find_all(&quot;li&quot;, class_=&quot;eg dexamp hax&quot;)</span></span><br><span class="line"><span class="comment"># write(</span></span><br><span class="line"><span class="comment"># file,</span></span><br><span class="line"><span class="comment"># word,</span></span><br><span class="line"><span class="comment"># pronoun,</span></span><br><span class="line"><span class="comment"># chinese,</span></span><br><span class="line"><span class="comment"># part_of_speech,</span></span><br><span class="line"><span class="comment"># attri,</span></span><br><span class="line"><span class="comment"># example_CHI,</span></span><br><span class="line"><span class="comment"># example_ENG,</span></span><br><span class="line"><span class="comment"># sentence,</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error occured on word &quot;</span>+word+<span class="string">&quot;, please check the code or spelling.&quot;</span>)</span><br><span class="line">lock.release()</span><br><span class="line"><span class="comment"># file.write(&quot;\n\n\n&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> nowbook <span class="keyword">in</span> <span class="built_in">range</span>(cntbook):</span><br><span class="line">book = stdin.readline().replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">page = <span class="built_in">int</span>(stdin.readline())</span><br><span class="line"></span><br><span class="line">file.write(<span class="string">&quot;\\chapter&#123;&quot;</span> + book + <span class="string">&quot;&#125;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(page):</span><br><span class="line"><span class="comment"># temp = stdin.readline().split()</span></span><br><span class="line">nowpage = stdin.readline().replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># print(&quot;processing &quot;+nowpage)</span></span><br><span class="line">file.write(</span><br><span class="line"><span class="string">&quot;\\textcolor[RGB]&#123;128,0,255&#125;&#123;\\section&#123;&quot;</span></span><br><span class="line">+ book</span><br><span class="line">+ <span class="string">&quot; &quot;</span></span><br><span class="line">+ nowpage</span><br><span class="line">+ <span class="string">&quot; &quot;</span></span><br><span class="line">+ stdin.readline().replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">+ <span class="string">&quot;&#125;&#125;\n&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># file.write(&quot;\\begin&#123;enumerate&#125;\n&quot;)</span></span><br><span class="line"><span class="comment"># cnt = int(stdin.readline())</span></span><br><span class="line">cnt=<span class="built_in">int</span>(stdin.readline())</span><br><span class="line">words=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">words.append(stdin.readline().replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="comment"># words = stdin.readline()</span></span><br><span class="line">threadings = []</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">threadings.append(</span><br><span class="line">threading.Thread(</span><br><span class="line">target=solve,</span><br><span class="line">args=[</span><br><span class="line">word,</span><br><span class="line">],</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threadings:</span><br><span class="line">t.start()</span><br><span class="line"><span class="comment"># for t in threadings:</span></span><br><span class="line">t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file.write(tail)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>write.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">shape = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">lock=threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params"></span></span><br><span class="line"><span class="params">file, <span class="comment"># 要写入的文件</span></span></span><br><span class="line"><span class="params">word=<span class="string">&quot;&quot;</span>, <span class="comment"># 原文</span></span></span><br><span class="line"><span class="params">pronunciation=<span class="string">&quot;&quot;</span>, <span class="comment"># 音标</span></span></span><br><span class="line"><span class="params">chinese=<span class="string">&quot;&quot;</span>, <span class="comment"># 中文</span></span></span><br><span class="line"><span class="params">part_of_speech=<span class="string">&quot;&quot;</span>, <span class="comment"># 词性</span></span></span><br><span class="line"><span class="params">attri=<span class="string">&quot;&quot;</span>, <span class="comment"># 其他属性，如是否可数</span></span></span><br><span class="line"><span class="params">example_CHN=[], <span class="comment"># 例子中文</span></span></span><br><span class="line"><span class="params">example_ENG=[], <span class="comment"># 例子英文</span></span></span><br><span class="line"><span class="params">sentence=[], <span class="comment"># 只有英文的例句</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ː&quot;,&quot; \\textlengthmark &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ˈ&quot;,&quot; \\textprimstress &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ɪ&quot;,&quot; \\i &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ɔ&quot;,&quot; \\textopeno &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ɒ&quot;,&quot; \\textturnscripta &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ʃ&quot;,&quot; \\textesh &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ˌ&quot;, &quot;\\textsecstress &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ʒ&quot;,&quot; \\textyogh &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ʌ&quot;,&quot; \\textturnv &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ɡ&quot;,&quot; \\textscriptg &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ɑ&quot;,&quot; \\textscripta &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ʊ&quot;,&quot; \\textupsilon &quot;)</span></span><br><span class="line"><span class="comment"># pronunciation=pronunciation.replace(&quot;ɜ&quot;,&quot; \\textrevepsilon &quot;)</span></span><br><span class="line">lock.acquire()</span><br><span class="line">file.write(<span class="string">&quot;\\begin&#123;itemize&#125;\n&quot;</span>)</span><br><span class="line">attri=attri.replace(<span class="string">&quot;C&quot;</span>,<span class="string">&quot; $ C $ &quot;</span>)</span><br><span class="line">attri=attri.replace(<span class="string">&quot;U&quot;</span>,<span class="string">&quot; $ U $ &quot;</span>)</span><br><span class="line">attri=attri.replace(<span class="string">&quot;I&quot;</span>,<span class="string">&quot; $ I $ &quot;</span>)</span><br><span class="line">attri=attri.replace(<span class="string">&quot;T&quot;</span>,<span class="string">&quot; $ T $ &quot;</span>)</span><br><span class="line">file.write(<span class="string">&quot;\\item &quot;</span>+word+<span class="string">&quot; &quot;</span>+pronunciation+<span class="string">&quot; $ &quot;</span>+part_of_speech+<span class="string">&quot; $ &quot;</span>+attri+<span class="string">&quot; &quot;</span>+chinese+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(example_CHN)&gt;<span class="number">0</span>:</span><br><span class="line">file.write(<span class="string">&quot;\\begin&#123;itemize&#125;\n&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(example_CHN)&gt;<span class="number">3</span>:</span><br><span class="line">example_CHN.pop()</span><br><span class="line">example_ENG.pop()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(example_CHN)):</span><br><span class="line">file.write(<span class="string">&quot;\\item[$\\diamond$] &quot;</span>)</span><br><span class="line">file.write(example_ENG[i].text.replace(<span class="string">&quot;$&quot;</span>,<span class="string">&quot; \\$ &quot;</span>))</span><br><span class="line">file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file.write(example_CHN[i].text.replace(<span class="string">&quot;%&quot;</span>,<span class="string">&quot; $ \\% $ &quot;</span>))</span><br><span class="line">file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file.write(<span class="string">&quot;\\end&#123;itemize&#125;\n&quot;</span>)</span><br><span class="line"><span class="comment"># if len(sentence)!=0:</span></span><br><span class="line"><span class="comment"># file.write(&quot;sentence:\n&quot;)</span></span><br><span class="line"><span class="comment"># file.write(&quot;\\begin&#123;itemize&#125;\n&quot;)</span></span><br><span class="line"><span class="comment"># for i in sentence:</span></span><br><span class="line"><span class="comment"># file.write(&quot;\\item[$\\diamond$] &quot;)</span></span><br><span class="line"><span class="comment"># file.write(i.text)</span></span><br><span class="line"><span class="comment"># file.write(&quot;\n&quot;)</span></span><br><span class="line"><span class="comment"># file.write(&quot;\\end&#123;itemize&#125;\n&quot;)</span></span><br><span class="line">file.write(<span class="string">&quot;\\end&#123;itemize&#125;\n&quot;</span>)</span><br><span class="line">lock.release()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error occured on word &quot;</span>+word+<span class="string">&quot;, please check the code or spelling.&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Templates</title>
      <link href="/2023/10/27/Cpp-templates/"/>
      <url>/2023/10/27/Cpp-templates/</url>
      
        <content type="html"><![CDATA[<h2 id="FastIO-from-Matrix-mlt"><a href="#FastIO-from-Matrix-mlt" class="headerlink" title="FastIO from Matrix_mlt"></a>FastIO from Matrix_mlt</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FastIO</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="type">char</span> ibuf[SIZE], obuf[SIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">char</span> &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (c = <span class="built_in">gc</span>(); !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">*s++ = c;</span><br><span class="line">*s = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">s.<span class="built_in">push_back</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p3 - obuf == SIZE)</span><br><span class="line"><span class="built_in">fwrite</span>(obuf, <span class="number">1</span>, SIZE, stdout), p3 = obuf;</span><br><span class="line">*p3++ = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123; <span class="built_in">pc</span>(c); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line"><span class="built_in">pc</span>(*s), ++s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(std::string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">char</span> c : s)</span><br><span class="line"><span class="built_in">pc</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(_Tp &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">f |= c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line"><span class="keyword">return</span> f ? x = ~x + <span class="number">1</span> : <span class="number">1</span>, <span class="built_in">void</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> stk[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> tp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!x)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pc</span>(<span class="string">&#x27;0&#x27;</span>), <span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x)</span><br><span class="line">stk[++tp] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (tp)</span><br><span class="line"><span class="built_in">pc</span>(stk[tp--] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(_Tp x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">write</span>(x);</span><br><span class="line"><span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(_Tp x)</span> </span>&#123; <span class="built_in">write</span>(x), <span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(_Tp &amp;x, Args &amp;...args)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(args...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x, Args... args)</span> </span>&#123; <span class="built_in">write</span>(x), <span class="built_in">write</span>(args...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(_Tp x, Args... args)</span> </span>&#123; <span class="built_in">writesp</span>(x), <span class="built_in">writesp</span>(args...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(_Tp x, Args... args)</span> </span>&#123; <span class="built_in">writeln</span>(x), <span class="built_in">writeln</span>(args...); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123; <span class="built_in">fwrite</span>(obuf, p3 - obuf, <span class="number">1</span>, stdout); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quick-Power-calculate-a-b-mod-p-in-O-log-n"><a href="#Quick-Power-calculate-a-b-mod-p-in-O-log-n" class="headerlink" title="Quick Power (calculate $ a^b mod p $ in $O( \log(n))$ )"></a>Quick Power (calculate $ a^b mod p $ in $O( \log(n))$ )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickpower</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> <span class="comment">// calculate $ a^b mod p $</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a %= p;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>, base = a;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans = ans * base % p;</span><br><span class="line">&#125;</span><br><span class="line">base = base * base % p;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Balancing-Tree-in-Segtree"><a href="#Balancing-Tree-in-Segtree" class="headerlink" title="Balancing Tree in Segtree"></a>Balancing Tree in Segtree</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC target(<span class="string">&quot;sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,lzcnt,abm,bmi,bmi2,fma,tune=native&quot;</span>)</span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> problemname <span class="string">&quot;P3380&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gc() (p1 == p2 &amp;&amp; (p2 = (p1 = ibuf) + fread(ibuf, 1, SIZE, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="keyword">namespace</span> FastIO</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="type">char</span> ibuf[SIZE], obuf[SIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">char</span> &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (c = <span class="built_in">gc</span>(); !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">*s++ = c;</span><br><span class="line">*s = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isgraph</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">s.<span class="built_in">push_back</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p3 - obuf == SIZE)</span><br><span class="line"><span class="built_in">fwrite</span>(obuf, <span class="number">1</span>, SIZE, stdout), p3 = obuf;</span><br><span class="line">*p3++ = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123; <span class="built_in">pc</span>(c); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line"><span class="built_in">pc</span>(*s), ++s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(std::string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">char</span> c : s)</span><br><span class="line"><span class="built_in">pc</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(_Tp &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; !std::<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">f |= c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (; std::<span class="built_in">isdigit</span>(c); c = <span class="built_in">gc</span>())</span><br><span class="line">x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line"><span class="keyword">return</span> f ? x = ~x + <span class="number">1</span> : <span class="number">1</span>, <span class="built_in">void</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> stk[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> tp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!x)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pc</span>(<span class="string">&#x27;0&#x27;</span>), <span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x)</span><br><span class="line">stk[++tp] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (tp)</span><br><span class="line"><span class="built_in">pc</span>(stk[tp--] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(_Tp x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">write</span>(x);</span><br><span class="line"><span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(_Tp x)</span> </span>&#123; <span class="built_in">write</span>(x), <span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(_Tp &amp;x, Args &amp;...args)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(args...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(_Tp x, Args... args)</span> </span>&#123; <span class="built_in">write</span>(x), <span class="built_in">write</span>(args...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(_Tp x, Args... args)</span> </span>&#123; <span class="built_in">writesp</span>(x), <span class="built_in">writesp</span>(args...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(_Tp x, Args... args)</span> </span>&#123; <span class="built_in">writeln</span>(x), <span class="built_in">writeln</span>(args...); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123; <span class="built_in">fwrite</span>(obuf, p3 - obuf, <span class="number">1</span>, stdout); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> const constexpr</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Main</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; num = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>, cnt = <span class="number">0</span>, size = <span class="number">1</span>;</span><br><span class="line">node *son[<span class="number">2</span>] = &#123;<span class="literal">nullptr</span>, <span class="literal">nullptr</span>&#125;, *father = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="built_in">node</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">val = a, cnt = b, size = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, node &amp;d, node &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">val = a, cnt = b, size = c;</span><br><span class="line">son[<span class="number">0</span>] = &amp;d, son[<span class="number">1</span>] = &amp;e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node *root=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(node *u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!u)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">u-&gt;size = (u-&gt;son[<span class="number">0</span>] ? u-&gt;son[<span class="number">0</span>]-&gt;size : <span class="number">0</span>) + (u-&gt;son[<span class="number">1</span>] ? u-&gt;son[<span class="number">1</span>]-&gt;size : <span class="number">0</span>) + u-&gt;cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(node *u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> u-&gt;father &amp;&amp; (u == (u-&gt;father-&gt;son[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> f1 = x-&gt;father, f2 = f1-&gt;father;</span><br><span class="line"><span class="keyword">auto</span> r1 = <span class="built_in">check</span>(x);</span><br><span class="line"><span class="keyword">if</span> (x-&gt;son[r1 ^ <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">x-&gt;son[r1 ^ <span class="number">1</span>]-&gt;father = f1;</span><br><span class="line">f1-&gt;son[r1] = x-&gt;son[r1 ^ <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">f1-&gt;son[r1] = x-&gt;son[r1 ^ <span class="number">1</span>];</span><br><span class="line">x-&gt;son[r1 ^ <span class="number">1</span>] = f1;</span><br><span class="line">x-&gt;father = f2;</span><br><span class="line">f1-&gt;father = x;</span><br><span class="line"><span class="keyword">if</span> (f2)</span><br><span class="line">&#123;</span><br><span class="line">f2-&gt;son[f1 == f2-&gt;son[<span class="number">1</span>]] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">maintain</span>(f1), <span class="built_in">maintain</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> father = x-&gt;father; father = x-&gt;father, father; <span class="built_in">rotate</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (father-&gt;father)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rotate</span>(<span class="built_in">check</span>(x) == <span class="built_in">check</span>(father) ? father : x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">root = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> cur = root;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;val == val)</span><br><span class="line">&#123;</span><br><span class="line">++cur-&gt;cnt;</span><br><span class="line"><span class="built_in">maintain</span>(cur);</span><br><span class="line"><span class="built_in">maintain</span>(cur-&gt;father);</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// auto father = cur-&gt;father;</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;son[cur-&gt;val &lt; val])</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;son[cur-&gt;val &lt; val];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;son[cur-&gt;val &lt; val] = <span class="keyword">new</span> node;</span><br><span class="line">cur-&gt;son[cur-&gt;val &lt; val]-&gt;val = val;</span><br><span class="line">++cur-&gt;son[cur-&gt;val &lt; val]-&gt;cnt;</span><br><span class="line">cur-&gt;son[cur-&gt;val &lt; val]-&gt;father = cur;</span><br><span class="line"><span class="built_in">maintain</span>(cur);</span><br><span class="line"><span class="built_in">maintain</span>(cur-&gt;son[cur-&gt;val &lt; val]);</span><br><span class="line"><span class="built_in">splay</span>(cur-&gt;son[cur-&gt;val &lt; val]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">root = <span class="keyword">new</span> node;</span><br><span class="line">root-&gt;cnt = <span class="number">1</span>;</span><br><span class="line">root-&gt;size = <span class="number">1</span>;</span><br><span class="line">root-&gt;val = val;</span><br><span class="line"><span class="built_in">maintain</span>(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> cur = root;</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k &lt; cur-&gt;val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;son[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;son[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> now + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k&gt;cur-&gt;val)</span><br><span class="line">&#123;</span><br><span class="line">now += (cur-&gt;son[<span class="number">0</span>] ? cur-&gt;son[<span class="number">0</span>]-&gt;size : <span class="number">0</span>);</span><br><span class="line">now += cur-&gt;cnt;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;son[<span class="number">1</span>])&#123;</span><br><span class="line">cur = cur-&gt;son[<span class="number">1</span>];&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> now + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">now += (cur-&gt;son[<span class="number">0</span>] ? cur-&gt;son[<span class="number">0</span>]-&gt;size : <span class="number">0</span>);</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> now + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> cur = root;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;son[<span class="number">0</span>] &amp;&amp; k &lt;= cur-&gt;son[<span class="number">0</span>]-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;son[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;son[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">k -= cur-&gt;cnt + (cur-&gt;son[<span class="number">0</span>] ? cur-&gt;son[<span class="number">0</span>]-&gt;size : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (k &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;son[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">pre</span><span class="params">(node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> cur = x-&gt;son[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (!cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;son[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;son[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">nxt</span><span class="params">(node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> cur = x-&gt;son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;son[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;son[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">rk</span>(x);</span><br><span class="line"><span class="keyword">auto</span> cur = root;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;cnt &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">--cur-&gt;cnt;</span><br><span class="line"><span class="built_in">maintain</span>(cur);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cur-&gt;son[<span class="number">0</span>] &amp;&amp; !cur-&gt;son[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cur-&gt;son[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">root = cur-&gt;son[<span class="number">1</span>];</span><br><span class="line">root-&gt;father = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> oldroot = root;</span><br><span class="line">node *x1 = <span class="built_in">pre</span>(root);</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;son[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;son[<span class="number">1</span>]-&gt;father = x1;</span><br><span class="line">&#125;</span><br><span class="line">x1-&gt;son[<span class="number">1</span>] = cur-&gt;son[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">delete</span> oldroot;</span><br><span class="line"><span class="built_in">maintain</span>(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segtree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> cl, cr;</span><br><span class="line">node *son[<span class="number">2</span>] = &#123;<span class="literal">nullptr</span>, <span class="literal">nullptr</span>&#125;, *father = <span class="literal">nullptr</span>;</span><br><span class="line">Splay *tree;</span><br><span class="line"><span class="built_in">node</span>()</span><br><span class="line">&#123;</span><br><span class="line">tree = <span class="keyword">new</span> Splay;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; *arr;</span><br><span class="line">node *root;</span><br><span class="line"><span class="built_in">Segtree</span>()</span><br><span class="line">&#123;</span><br><span class="line">arr = <span class="literal">nullptr</span>;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Segtree</span>(vector&lt;<span class="type">int</span>&gt; &amp;a)</span><br><span class="line">&#123;</span><br><span class="line">arr = &amp;a;</span><br><span class="line">root = <span class="built_in">build_tree</span>(<span class="number">1</span>, arr-&gt;<span class="built_in">size</span>() - <span class="number">1</span>, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">build_tree</span><span class="params">(<span class="type">int</span> cl, <span class="type">int</span> cr, node *fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node *p = <span class="keyword">new</span> node;</span><br><span class="line">p-&gt;father = fa;</span><br><span class="line">p-&gt;cl = cl, p-&gt;cr = cr;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = arr-&gt;<span class="built_in">begin</span>() + cl; i &lt;= arr-&gt;<span class="built_in">begin</span>() + cr; i++)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">insert</span>(*i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cl == cr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (cl + cr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">p-&gt;son[<span class="number">0</span>] = <span class="built_in">build_tree</span>(cl, mid, p);</span><br><span class="line">p-&gt;son[<span class="number">1</span>] = <span class="built_in">build_tree</span>(mid + <span class="number">1</span>, cr, p);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> val, node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">del</span>(arr-&gt;<span class="built_in">at</span>(k));</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">insert</span>(val);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;cl == p-&gt;cr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">modify</span>(k, val, p-&gt;son[(p-&gt;son[<span class="number">0</span>]-&gt;cr &lt; k)]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">modify</span>(k, val, root);</span><br><span class="line">(*arr)[k] = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rnk</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k, node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;cl &amp;&amp; p-&gt;cr &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// p-&gt;tree-&gt;insert(k);</span></span><br><span class="line"><span class="type">int</span> res = p-&gt;tree-&gt;<span class="built_in">rk</span>(k) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// p-&gt;tree-&gt;del(k);</span></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;son[<span class="number">0</span>]-&gt;cr)</span><br><span class="line">&#123;</span><br><span class="line">res += <span class="built_in">rnk</span>(l, r, k, p-&gt;son[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &gt;= p-&gt;son[<span class="number">1</span>]-&gt;cl)</span><br><span class="line">&#123;</span><br><span class="line">res += <span class="built_in">rnk</span>(l, r, k, p-&gt;son[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rnk</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">rnk</span>(l, r, k, root) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val, node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;cl &amp;&amp; p-&gt;cr &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">insert</span>(val);</span><br><span class="line"><span class="type">int</span> ans = p-&gt;tree-&gt;<span class="built_in">pre</span>(p-&gt;tree-&gt;root)-&gt;val;</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">del</span>(val);</span><br><span class="line"><span class="keyword">if</span> (ans &gt;= val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = INT_MIN;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;son[<span class="number">0</span>]-&gt;cr)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">pre</span>(l, r, val, p-&gt;son[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &gt;= p-&gt;son[<span class="number">1</span>]-&gt;cl)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">pre</span>(l, r, val, p-&gt;son[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pre</span>(l, r, val, root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val, node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;cl &amp;&amp; p-&gt;cr &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">insert</span>(val);</span><br><span class="line"><span class="type">int</span> ans = p-&gt;tree-&gt;<span class="built_in">nxt</span>(p-&gt;tree-&gt;root)-&gt;val;</span><br><span class="line">p-&gt;tree-&gt;<span class="built_in">del</span>(val);</span><br><span class="line"><span class="keyword">if</span> (ans &lt;= val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p-&gt;son[<span class="number">0</span>]-&gt;cr)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, <span class="built_in">nxt</span>(l, r, val, p-&gt;son[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &gt;= p-&gt;son[<span class="number">1</span>]-&gt;cl)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, <span class="built_in">nxt</span>(l, r, val, p-&gt;son[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">nxt</span>(l, r, val, root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cl = <span class="number">-1</span>, cr = <span class="number">1e8</span> + <span class="number">1</span>, mid;</span><br><span class="line"><span class="keyword">while</span> (cl &lt; cr)</span><br><span class="line">&#123;</span><br><span class="line">mid = (cl + cr + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rnk</span>(l, r, mid) &lt;= val)</span><br><span class="line">&#123;</span><br><span class="line">cl = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cr = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cl;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">FastIO::<span class="built_in">read</span>(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, temp; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">FastIO::<span class="built_in">read</span>(temp);</span><br><span class="line">num.<span class="built_in">push_back</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line">Tree = <span class="built_in">Segtree</span>(num);</span><br><span class="line"><span class="type">int</span> opt, l, r, pos, x;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line">FastIO::<span class="built_in">read</span>(opt);</span><br><span class="line"><span class="keyword">switch</span> (opt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(l, r, x);</span><br><span class="line">FastIO::<span class="built_in">writeln</span>(Tree.<span class="built_in">rnk</span>(l, r, x));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(l, r, x);</span><br><span class="line">FastIO::<span class="built_in">writeln</span>(Tree.<span class="built_in">kth</span>(l, r, x));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(pos, x);</span><br><span class="line">Tree.<span class="built_in">modify</span>(pos, x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(l, r, x);</span><br><span class="line">FastIO::<span class="built_in">writeln</span>(Tree.<span class="built_in">pre</span>(l, r, x));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">FastIO::<span class="built_in">read</span>(l, r, x);</span><br><span class="line">FastIO::<span class="built_in">writeln</span>(Tree.<span class="built_in">nxt</span>(l, r, x));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">FastIO::<span class="built_in">flush</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(problemname <span class="string">&quot;_8.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(problemname <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">Main::<span class="built_in">main</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/27/hello-world/"/>
      <url>/2023/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
